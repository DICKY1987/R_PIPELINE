
╭─── Claude Code v2.0.27 ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│                                       │ Tips for getting started                                                                                 │
│           Welcome back DICK!          │ ✔ Run /init to create a CLAUDE.md file with instructions for Claude                                      │
│                                       │ ───────────────────────────────────────────────────────────────────                                      │
│                ▐▛███▜▌                │ Recent activity                                                                                          │
│               ▝▜█████▛▘               │ No recent activity                                                                                       │
│                 ▘▘ ▝▝                 │                                                                                                          │
│                                       │                                                                                                          │
│        Sonnet 4.5 · Claude Pro        │                                                                                                          │
│   C:\Users\Richard Wilks\R_PIPELINE   │                                                                                                          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

> /init is analyzing your codebase… 

● I'll analyze the codebase to understand its structure and create a comprehensive CLAUDE.md file.

● Search(pattern: "**/*")
  ⎿  Found 100 files (ctrl+o to expand)

● Read(README.md)
  ⎿  Error reading file

● Search(pattern: "**/*.md")
  ⎿  Found 48 files (ctrl+o to expand)

● Search(pattern: "**/*.py")
  ⎿  Found 11 files (ctrl+o to expand)

● Search(pattern: "**/*.json")
  ⎿  Found 7 files (ctrl+o to expand)

● Search(pattern: "**/*.yaml")
  ⎿  Found 0 files 

● Search(pattern: "**/*.yml")
  ⎿  Found 0 files 

● Let me read the key documentation files to understand the codebase architecture:

● Read(CLAUDE.md)
  ⎿  Error reading file

● Read(SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\README.md)
  ⎿  Read 89 lines

● Read(SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\docs\ARCHITECTURE.md)
  ⎿  Read 69 lines

● Read(SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\docs\GUARDRAILS.md)
  ⎿  Read 56 lines

● Read(SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\docs\VALIDATION_PIPELINE.md)
  ⎿  Read 53 lines
  ⎿  SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\CLAUDE.md

● Let me read a few more key files to understand the system better:

● Read(SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\docs\AGENT_GUIDELINES.md)
  ⎿  Read 40 lines

● Read(SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\docs\conventions.md)
  ⎿  Read 14 lines

● Read(SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\CONTRIBUTING.md)
  ⎿  Read 23 lines

● Read(SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\tools\Verify.ps1)
  ⎿  Read 25 lines

● Now let me check the existing CLAUDE.md in the inner directory and read some validation scripts to understand the testing and development
  commands:

● Read(SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\scripts\validation\Invoke-SafePatchValidation.ps1)
  ⎿  Read 37 lines

● Read(SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\scripts\validation\Invoke-UnitTests.ps1)
  ⎿  Read 30 lines

● Search(pattern: "**/*.ps1", path: "SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\.mcp")
  ⎿  Found 6 files (ctrl+o to expand)

● Bash(cd "C:\Users\Richard Wilks\R_PIPELINE" && pwd)
  ⎿  /c/Users/Richard Wilks/R_PIPELINE

● Perfect! I have a comprehensive understanding of the codebase. Now I'll create an improved CLAUDE.md file at the root level that consolidates
  the essential information for future Claude Code instances.

● Write(CLAUDE.md)
  ⎿  Wrote 1 lines to CLAUDE.md                                                                                                                
     # CLAUDE.md
     This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.
     ## Project Overview
     This is the **AI Upkeep Suite v2 (AIUOKEEP)** - a policy-driven guardrail platform that mediates AI-generated code changes through MCP
     (Model Context Protocol) tooling, SafePatch validation, and audit governance. It creates a controlled environment where AI agents can
     generate and maintain code while being constrained by deterministic guardrails and automated quality gates.
     **Core Purpose**: Enforce higher-quality AI code output across PowerShell, Python, and TypeScript by centralizing all code-quality tools
     behind MCP servers with guardrail chains, schema validation, and policy enforcement.

● I've successfully created a comprehensive CLAUDE.md file at the repository root. Here's what I've included:

  Key Sections Added

  1. Project Overview - Clear explanation of the AIUOKEEP platform and its purpose
  2. Repository Structure - Guide to the nested directory structure and key locations
  3. Development Commands - Comprehensive command reference for:
    - SafePatch validation pipeline (full and individual stages)
    - MCP environment management
    - Python and PowerShell testing
    - Git hooks
    - Audit and reporting tools
  4. System Architecture - High-level explanation of:
    - SafePatch validation pipeline flow
    - MCP tool plane organization
    - Five categories of guardrails
  5. ChangePlan & Diff Requirements - JSON schema format and unified diff expectations
  6. Code Standards - Detailed requirements for PowerShell, Python, and TypeScript with:
    - Mandatory code elements
    - Forbidden patterns
    - Examples
  7. Critical Configuration Files - Complete list of config files with their purposes
  8. Working with AI Agents - Guidance on:
    - Output requirements
    - Edit strategies
    - Forbidden patterns
  9. File Naming Conventions - The structured naming system used throughout
  10. Troubleshooting - Common issues and solutions for validation failures
  11. Key Design Principles - The seven core principles driving the architecture
  12. Additional Documentation - References to deeper documentation files

  The document focuses on actionable information that future Claude Code instances will need to be productive quickly, emphasizing the "big
  picture" architecture that requires reading multiple files to understand, while avoiding repetition of obvious practices or exhaustive file
  listings.

> these are my chat with ai about this project, analyze each chat and create a plan to devlop the dir structure : 
  ⎿  Interrupted · What should Claude do instead?

> "C:\Users\Richard Wilks\R_PIPELINE\madchat2.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat1.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat12.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat11.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat10.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat9.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat8.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat7.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat6.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat5.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat4.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat3.md" 

● I'll analyze all the chat transcripts to understand the project evolution and create a development plan for the directory structure.
  ⎿  Interrupted · What should Claude do instead?

> these are my chat with ai about this project, analyze each chat to get understanding of how the project evolved and create a plan to devlop 
the dir structure :
 

> "C:\Users\Richard Wilks\R_PIPELINE\madchat2.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat1.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat12.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat11.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat10.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat9.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat8.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat7.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat6.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat5.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat4.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat3.md" 

● I'll analyze all 12 chat transcripts to understand the project evolution and create a comprehensive development plan for the directory
  structure.

● Read(madchat1.md)
  ⎿  Read 115 lines

● Read(madchat2.md)
  ⎿  Read 85 lines

● Read(madchat3.md)
  ⎿  Read 261 lines

● Read(madchat4.md)
  ⎿  Read 113 lines

● Read(madchat5.md)
  ⎿  Read 248 lines

● Read(madchat6.md)
  ⎿  Read 98 lines

● Read(madchat7.md)
  ⎿  Read 215 lines

● Read(madchat8.md)
  ⎿  Read 214 lines

● Read(madchat9.md)
  ⎿  Read 180 lines

● Read(madchat10.md)
  ⎿  Read 59 lines

● Read(madchat11.md)
  ⎿  Read 242 lines

● Read(madchat12.md)
  ⎿  Read 69 lines

● Now let me check the current directory structure to understand what exists:

● Bash(cd "C:\Users\Richard Wilks\R_PIPELINE" && find SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP- -maxdepth 3 -type d 2>/dev/null | head -50)
  ⎿  SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-        
     SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-/.claude
     SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-/.git
     … +47 lines (ctrl+o to expand)

● Read(SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-\MODULAR_STRUCTURE_TREE.md)
  ⎿  Read 132 lines

● Now I have a comprehensive understanding of how the project evolved. Let me create a development plan based on all the chat insights:
  ⎿  User rejected Claude's plan:
     ╭─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
     │ Directory Structure Development Plan                                                                                                        │
     │                                                                                                                                             │
     │ Analysis Summary                                                                                                                            │
     │                                                                                                                                             │
     │ After analyzing all 12 chat transcripts, I've identified the project's evolution from initial concept to a comprehensive AI-operated        │
     │ pipeline system. The chats reveal:                                                                                                          │
     │                                                                                                                                             │
     │ Key Architectural Decisions (from chats 1-7):                                                                                               │
     │                                                                                                                                             │
     │ - Manifest-driven pipeline with pipeline.yml as single source of truth                                                                      │
     │ - Two-ID naming convention (Mnemonic + Hash: e.g., DR-5K9)                                                                                  │
     │ - 24+ modular components organized in 7 phases                                                                                              │
     │ - Proven-process discovery before custom coding                                                                                             │
     │ - Machine-first, headless CLI approach with optional GUI                                                                                    │
     │ - Guardrails at every layer (input, structural, policy, execution, audit)                                                                   │
     │                                                                                                                                             │
     │ Current State (existing SPEC-1 directory):                                                                                                  │
     │                                                                                                                                             │
     │ - ✅ MCP infrastructure (servers, configs)                                                                                                   │
     │ - ✅ Validation pipeline scripts                                                                                                             │
     │ - ✅ Policy/OPA rules and schemas                                                                                                            │
     │ - ✅ Templates for PowerShell/Python/TypeScript                                                                                              │
     │ - ❌ Nested duplicate directory structure                                                                                                    │
     │ - ❌ No manifest-driven orchestrator                                                                                                         │
     │ - ❌ No modular pipeline structure                                                                                                           │
     │ - ❌ No proven-process discovery system                                                                                                      │
     │ - ❌ No Two-ID naming with registry                                                                                                          │
     │                                                                                                                                             │
     │ ---                                                                                                                                         │
     │ Development Plan: 3-Phase Restructuring                                                                                                     │
     │                                                                                                                                             │
     │ Phase 1: Foundation Cleanup & Core Structure (Week 1-2)                                                                                     │
     │                                                                                                                                             │
     │ 1.1 Flatten Nested Directory Structure                                                                                                      │
     │                                                                                                                                             │
     │ - Action: Consolidate SPEC-1.../SPEC-1... nested structure into single root                                                                 │
     │ - Preserve: All existing .mcp/, mcp-servers/, policy/, scripts/, templates/, tools/                                                         │
     │ - Cleanup: Remove duplicate .git folders, merge any divergent files                                                                         │
     │                                                                                                                                             │
     │ 1.2 Create Manifest-Driven Foundation                                                                                                       │
     │                                                                                                                                             │
     │ New directories:                                                                                                                            │
     │ /manifests/                                                                                                                                 │
     │   ├── pipeline.yml              # Single source of truth (modules, deps, phases)                                                            │
     │   ├── pipeline.schema.json      # JSON Schema validator                                                                                     │
     │   └── modules_config.yaml       # Per-module configurations                                                                                 │
     │                                                                                                                                             │
     │ 1.3 Establish Two-ID Registry System                                                                                                        │
     │                                                                                                                                             │
     │ New files:                                                                                                                                  │
     │ /PIPELINE_MODS/                                                                                                                             │
     │   └── registry.yaml             # Module → TID mapping (mnemonic, hash, color)                                                              │
     │                                                                                                                                             │
     │ /tools/nameguard/                                                                                                                           │
     │   ├── nameguard.py              # TID enforcement & api.py generator                                                                        │
     │   ├── nameguard.config.yaml                                                                                                                 │
     │   └── nameguard.schema.json                                                                                                                 │
     │                                                                                                                                             │
     │ Registry structure (from chat 4):                                                                                                           │
     │ modules:                                                                                                                                    │
     │   plan_ingestor:      { mnemonic: PI, hash: 5K9, color: "#1f77b4" }                                                                         │
     │   workstream_planner: { mnemonic: WP, hash: A2F, color: "#ff7f0e" }                                                                         │
     │   domain_router:      { mnemonic: DR, hash: 2QJ, color: "#2ca02c" }                                                                         │
     │   # ... all 24 modules                                                                                                                      │
     │                                                                                                                                             │
     │ ---                                                                                                                                         │
     │ Phase 2: Modular Pipeline Structure (Week 3-5)                                                                                              │
     │                                                                                                                                             │
     │ 2.1 Create 7-Phase Module Architecture                                                                                                      │
     │                                                                                                                                             │
     │ New directory structure (from chats 1, 3, 7):                                                                                               │
     │                                                                                                                                             │
     │ /modules/                                                                                                                                   │
     │   ├── __init__.py                                                                                                                           │
     │   ├── phase_0_backplane/                                                                                                                    │
     │   │   ├── ledger/                                                                                                                           │
     │   │   │   ├── LD-XXX.run.py                                                                                                                 │
     │   │   │   ├── LD-XXX.config.yaml                                                                                                            │
     │   │   │   ├── LD-XXX.schema.ledger.json                                                                                                     │
     │   │   │   ├── LD-XXX.append.py                                                                                                              │
     │   │   │   └── api.py  (generated by nameguard)                                                                                              │
     │   │   ├── policy_pack/                                                                                                                      │
     │   │   ├── cache_ratelimit/                                                                                                                  │
     │   │   ├── concurrency_controller/                                                                                                           │
     │   │   └── observability/                                                                                                                    │
     │   ├── phase_1_intake_routing/                                                                                                               │
     │   │   ├── plan_ingestor/                                                                                                                    │
     │   │   ├── workstream_planner/                                                                                                               │
     │   │   ├── domain_router/                                                                                                                    │
     │   │   ├── goal_normalizer/                                                                                                                  │
     │   │   └── query_expander/                                                                                                                   │
     │   ├── phase_2_discovery_scoring/                                                                                                            │
     │   │   ├── discovery_adapters/                                                                                                               │
     │   │   ├── feature_extractors/                                                                                                               │
     │   │   └── scorer/                                                                                                                           │
     │   ├── phase_3_synthesis_patch/                                                                                                              │
     │   │   ├── synthesizer/                                                                                                                      │
     │   │   └── structured_patcher/                                                                                                               │
     │   ├── phase_4_quality_gates/                                                                                                                │
     │   │   ├── guardrails/                                                                                                                       │
     │   │   ├── verifier/                                                                                                                         │
     │   │   └── error_auto_repair/                                                                                                                │
     │   ├── phase_5_decision_export/                                                                                                              │
     │   │   ├── selector/                                                                                                                         │
     │   │   ├── exporter/                                                                                                                         │
     │   │   └── provenance_rollback/                                                                                                              │
     │   └── phase_6_knowledge_ci/                                                                                                                 │
     │       ├── knowledge_reuse/                                                                                                                  │
     │       ├── playbook_promoter/                                                                                                                │
     │       └── ci_precommit_integrator/                                                                                                          │
     │                                                                                                                                             │
     │ Per-module standard files (from chat 5):                                                                                                    │
     │ - {TID}.run.py - Headless CLI entrypoint                                                                                                    │
     │ - {TID}.config.yaml - Module-specific settings                                                                                              │
     │ - {TID}.schema.contract.json - Input/output schema                                                                                          │
     │ - {TID}.example.*.json - Valid example payloads                                                                                             │
     │ - api.py - Stable import surface (auto-generated)                                                                                           │
     │                                                                                                                                             │
     │ 2.2 Create Orchestrator                                                                                                                     │
     │                                                                                                                                             │
     │ New directory:                                                                                                                              │
     │ /orchestrator/                                                                                                                              │
     │   ├── run.py                # Main orchestrator (reads manifests)                                                                           │
     │   ├── io_bus.py             # JSONL module chaining                                                                                         │
     │   ├── errors.py             # Common exceptions                                                                                             │
     │   ├── graph_executor.py     # Dependency-aware execution                                                                                    │
     │   └── config.yaml                                                                                                                           │
     │                                                                                                                                             │
     │ 2.3 Add Output & Machine Directories                                                                                                        │
     │                                                                                                                                             │
     │ /out/                       # Champion artifacts & patches                                                                                  │
     │   ├── champions/                                                                                                                            │
     │   └── patches/                                                                                                                              │
     │                                                                                                                                             │
     │ /._machine/                 # Append-only global ledger & caches                                                                            │
     │   ├── ledger.jsonl                                                                                                                          │
     │   ├── cache/                                                                                                                                │
     │   └── runs/                                                                                                                                 │
     │                                                                                                                                             │
     │ ---                                                                                                                                         │
     │ Phase 3: Proven-Process Discovery System (Week 6-7)                                                                                         │
     │                                                                                                                                             │
     │ 3.1 Research Infrastructure (from chats 8-11)                                                                                               │
     │                                                                                                                                             │
     │ New structure:                                                                                                                              │
     │ /.research/                                                                                                                                 │
     │   ├── research.config.yaml         # Default config template                                                                                │
     │   ├── queries.yaml                 # Query expansion output                                                                                 │
     │   ├── evidence.jsonl               # Append-only discovery results                                                                          │
     │   ├── ranked_candidates.json       # Scored results                                                                                         │
     │   ├── decision.md                  # Human-readable decision                                                                                │
     │   ├── summary.md                   # Executive summary                                                                                      │
     │   ├── cache/                       # Raw API payloads                                                                                       │
     │   └── schema/                                                                                                                               │
     │       ├── evidence.schema.json                                                                                                              │
     │       ├── ranked_candidates.schema.json                                                                                                     │
     │       └── goal.schema.json                                                                                                                  │
     │                                                                                                                                             │
     │ /proven-playbooks/                                                                                                                          │
     │   ├── file_watch_lint_test.yaml                                                                                                             │
     │   ├── invoke_tasks.yaml                                                                                                                     │
     │   └── gha_ci_pipeline.yaml                                                                                                                  │
     │                                                                                                                                             │
     │ 3.2 Research Pipeline Components                                                                                                            │
     │                                                                                                                                             │
     │ Integrate into /modules/ structure:                                                                                                         │
     │ - Goal Normalizer (already planned in phase_1)                                                                                              │
     │ - Query Expander (already planned in phase_1)                                                                                               │
     │ - Discovery Adapters (already planned in phase_2)                                                                                           │
     │ - Feature Extractors (already planned in phase_2)                                                                                           │
     │ - Scorer (already planned in phase_2)                                                                                                       │
     │                                                                                                                                             │
     │ ---                                                                                                                                         │
     │ Phase 4: GUI & Integration (Week 8)                                                                                                         │
     │                                                                                                                                             │
     │ 4.1 Python GUI Control Surface (from chat 6)                                                                                                │
     │                                                                                                                                             │
     │ /gui/                                                                                                                                       │
     │   ├── app.py                # Main GUI (work-stream control)                                                                                │
     │   ├── api.py                # Subprocess IPC to orchestrator                                                                                │
     │   ├── views/                                                                                                                                │
     │   │   ├── status.py                                                                                                                         │
     │   │   ├── workstreams.py                                                                                                                    │
     │   │   ├── diff_viewer.py                                                                                                                    │
     │   │   └── pr_link.py                                                                                                                        │
     │   └── config.yaml                                                                                                                           │
     │                                                                                                                                             │
     │ 4.2 Integration & Testing                                                                                                                   │
     │                                                                                                                                             │
     │ - Wire nameguard into pre-commit hooks                                                                                                      │
     │ - Update .mcp/ configs to reference new module paths                                                                                        │
     │ - Create manifests/pipeline.yml with all 24 modules                                                                                         │
     │ - Test orchestrator with simple work-streams                                                                                                │
     │ - Validate Two-ID naming across all modules                                                                                                 │
     │                                                                                                                                             │
     │ ---                                                                                                                                         │
     │ Migration Strategy                                                                                                                          │
     │                                                                                                                                             │
     │ Step 1: Backup & Prepare                                                                                                                    │
     │                                                                                                                                             │
     │ 1. Create full backup of current SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP- directory                                                        │
     │ 2. Document any custom modifications to existing files                                                                                      │
     │                                                                                                                                             │
     │ Step 2: Incremental Restructuring                                                                                                           │
     │                                                                                                                                             │
     │ 1. Week 1: Flatten nested structure, create /manifests/, /PIPELINE_MODS/, /tools/nameguard/                                                 │
     │ 2. Week 2: Build registry.yaml with all 24 modules, implement nameguard tool                                                                │
     │ 3. Week 3-4: Create /modules/ structure with phase organization, migrate existing code where applicable                                     │
     │ 4. Week 5: Create /orchestrator/ and basic pipeline execution                                                                               │
     │ 5. Week 6: Add /.research/ infrastructure and proven-playbooks                                                                              │
     │ 6. Week 7: Integrate research modules with main pipeline                                                                                    │
     │ 7. Week 8: Build /gui/ control surface, end-to-end testing                                                                                  │
     │                                                                                                                                             │
     │ Step 3: Validation Checkpoints                                                                                                              │
     │                                                                                                                                             │
     │ - After each week: Run existing .\tools\Verify.ps1 to ensure no regressions                                                                 │
     │ - Validate all schemas with JSON Schema validators                                                                                          │
     │ - Test MCP server integrations                                                                                                              │
     │ - Run SafePatch validation pipeline                                                                                                         │
     │                                                                                                                                             │
     │ ---                                                                                                                                         │
     │ Key Files to Create                                                                                                                         │
     │                                                                                                                                             │
     │ Critical Configuration Files                                                                                                                │
     │                                                                                                                                             │
     │ 1. manifests/pipeline.yml - Defines all 24 modules, dependencies, phases                                                                    │
     │ 2. PIPELINE_MODS/registry.yaml - Two-ID mappings for all modules                                                                            │
     │ 3. tools/nameguard/nameguard.py - TID enforcement automation                                                                                │
     │ 4. orchestrator/run.py - Main pipeline orchestrator                                                                                         │
     │ 5. .research/research.config.yaml - Proven-process discovery config                                                                         │
     │ 6. gui/app.py - Control surface for human interaction                                                                                       │
     │                                                                                                                                             │
     │ Module Scaffolding Template                                                                                                                 │
     │                                                                                                                                             │
     │ For each of 24 modules, create:                                                                                                             │
     │ - {TID}.run.py with --in/--out JSON interface                                                                                               │
     │ - {TID}.config.yaml with module-specific tunables                                                                                           │
     │ - {TID}.schema.contract.json defining I/O contracts                                                                                         │
     │ - api.py (auto-generated by nameguard)                                                                                                      │
     │                                                                                                                                             │
     │ ---                                                                                                                                         │
     │ Success Criteria                                                                                                                            │
     │                                                                                                                                             │
     │ 1. ✅ Single-level directory structure (no nesting)                                                                                          │
     │ 2. ✅ All 24 modules with Two-ID naming                                                                                                      │
     │ 3. ✅ pipeline.yml drives orchestration                                                                                                      │
     │ 4. ✅ Nameguard enforces file naming automatically                                                                                           │
     │ 5. ✅ Proven-process discovery runs before synthesis                                                                                         │
     │ 6. ✅ GUI control surface operational                                                                                                        │
     │ 7. ✅ Existing MCP/validation infrastructure integrated                                                                                      │
     │ 8. ✅ All schemas validate                                                                                                                   │
     │ 9. ✅ SafePatch pipeline passes                                                                                                              │
     │ 10. ✅ End-to-end work-stream execution successful                                                                                           │
     │                                                                                                                                             │
     │ ---                                                                                                                                         │
     │ Next Steps After Approval                                                                                                                   │
     │                                                                                                                                             │
     │ 1. Create backup of current structure                                                                                                       │
     │ 2. Begin Phase 1.1: Flatten nested directories                                                                                              │
     │ 3. Generate complete registry.yaml with all module TIDs                                                                                     │
     │ 4. Build manifests/pipeline.yml skeleton                                                                                                    │
     │ 5. Implement nameguard.py tool                                                                                                              │
     │ 6. Create module directory structure                                                                                                        │
     │ 7. Begin migrating existing code to new structure                                                                                           │
     ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

> i added these files do they change anything about the plan? 
  ⎿  Interrupted · What should Claude do instead?

> "C:\Users\Richard Wilks\R_PIPELINE\quick_start_guide.md"
"C:\Users\Richard Wilks\R_PIPELINE\streamlined_workflow_blueprint.md"
"C:\Users\Richard Wilks\R_PIPELINE\madchat13.md"
"C:\Users\Richard Wilks\R_PIPELINE\00_EXECUTIVE_SUMMARY.md"
"C:\Users\Richard Wilks\R_PIPELINE\comparison_and_migration.md" 

● Let me read these additional files to see if they impact the development plan:

● Read(quick_start_guide.md)
  ⎿  Read 944 lines

● Read(streamlined_workflow_blueprint.md)
  ⎿  Read 980 lines

● Read(madchat13.md)
  ⎿  Read 283 lines

● Read(00_EXECUTIVE_SUMMARY.md)
  ⎿  Read 416 lines

● Read(comparison_and_migration.md)
  ⎿  Read 845 lines

● Yes, these files completely change the plan! After reading all of them, here's what I discovered:

  Major Direction Shift

  Your project evolved significantly:

  Original Direction (from chats 1-12):

  - 24 modules across 7 phases
  - Complex manifest-driven pipeline
  - Two-ID naming system
  - 41 files, 2-3 days setup
  - Custom orchestration layer

  NEW Direction (chat 13 + new docs):

  - Streamlined to 15 files, 3 phases
  - Leverage Invoke-Build/pyinvoke directly
  - No custom orchestration needed
  - 3-4 hours setup (not days)
  - 81% less code

  What Changed

  The new documents reveal that after researching Invoke-Build and pyinvoke (chat 13), you realized:

  1. Task runners already solve orchestration - No need to build custom adapters
  2. Built-in result capture - No need for custom JSON schemas
  3. Native dependency graphs - No need for manual chaining
  4. 2 layers instead of 4 - Eliminated adapter + routing layers

  Updated Development Plan
                                                                                                                                               
●User approved Claude's plan:
  ⎿  Streamlined Development Plan (Based on New Documents)

     Overview

     Implement a simplified file-watcher pipeline that integrates with your existing SPEC-1 guardrail infrastructure, using the streamlined 
     15-file approach instead of the complex 24-module system.

     Key Decision: Hybrid Approach

     Keep:
     - ✅ Existing SPEC-1 MCP infrastructure (.mcp/, mcp-servers/)
     - ✅ Existing SafePatch validation pipeline (scripts/validation/)
     - ✅ Existing policy/guardrail system (policy/, .semgrep/)
     - ✅ Existing templates and tools

     Add:
     - ✅ Streamlined file-watcher (15 files, not 41)
     - ✅ Invoke-Build or pyinvoke as orchestrator
     - ✅ Direct tool integration (no adapter layer)

     Don't Build:
     - ❌ 24-module manifest system
     - ❌ Two-ID naming registry
     - ❌ Custom adapter layer
     - ❌ Complex routing policies

     ---
     Phase 1: Core File-Watcher Setup (3-4 hours)

     1.1 Choose Your SSOT (30 minutes)

     Option A: PowerShell-First (Invoke-Build)
     - Use if: Windows-heavy, PowerShell team
     - Better: Native incremental builds, Windows integration

     Option B: Python-First (pyinvoke)
     - Use if: Cross-platform, Python team  
     - Better: More Pythonic, library importable

     Recommendation: Based on your existing PowerShell scripts in SPEC-1, choose Invoke-Build

     1.2 Create Watcher Infrastructure (2 hours)

     New directory: /watcher/ in root

     C:\Users\Richard Wilks\R_PIPELINE\
     ├── SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-/  (existing, keep as-is)
     └── watcher/                                      (NEW)
         ├── watch.ps1 or watch.py                     (60 lines)
         ├── watch.config.json
         ├── watch.ignore
         └── build.ps1 or tasks.py                     (150 lines - SSOT)

     Files to create (use quick_start_guide.md templates):

     1. watcher/build.ps1 (PowerShell SSOT)
       - Routes by extension (Python vs PowerShell)
       - Calls existing SPEC-1 validation scripts
       - Writes results to .runs/watch/
     2. watcher/watch.ps1 (File watcher)
       - Debounce logic (500ms)
       - Stability checks
       - Invokes Invoke-Build check.one -Path $file
     3. watcher/watch.config.json (Configuration)
     {
       "debounce_ms": 500,
       "stability_check_ms": 100,
       "include_patterns": ["**/*.py", "**/*.ps1", "**/*.psm1"]
     }
     4. watcher/watch.ignore (Ignore patterns)
     .runs/
     __pycache__/
     .git/
     *.tmp

     1.3 Integration with Existing SPEC-1 (1 hour)

     Key Integration Points:

     # In watcher/build.ps1

     task python.check {
         # Call existing SPEC-1 validation
         & "$PSScriptRoot/../SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-/SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-/scripts/validation/Invoke-Forma
     tCheck.ps1" -Workspace $Path
         & "$PSScriptRoot/../SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-/SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-/scripts/validation/Invoke-LintC
     heck.ps1" -Workspace $Path
         & "$PSScriptRoot/../SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-/SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-/scripts/validation/Invoke-UnitT
     ests.ps1" -Workspace $Path
     }

     task pwsh.check {
         # Call existing SPEC-1 validation
         & "$PSScriptRoot/../SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-/SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-/scripts/validation/Invoke-SafeP
     atchValidation.ps1" -Workspace $Path
     }

     task check.one {
         param($Path)
         
         $ext = [IO.Path]::GetExtension($Path)
         switch -Regex ($ext) {
             '\.py$'         { Invoke-Build python.check -Result r }
             '\.(ps1|psm1)$' { Invoke-Build pwsh.check -Result r }
         }
         
         # Write result
         $timestamp = Get-Date -Format 'yyyyMMdd_HHmmss'
         $r | ConvertTo-Json | Set-Content ".runs/watch/$timestamp.json"
     }

     1.4 Create Output Directory Structure

     mkdir -p .runs/watch
     mkdir -p .runs/ci

     ---
     Phase 2: Flatten Nested SPEC-1 Structure (2-3 hours)

     2.1 Consolidate Nested Directories

     Current problem: 
     SPEC-1.../SPEC-1.../  (nested duplicate)

     Solution:
     1. Backup current structure
     2. Flatten to single SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP/
     3. Update all path references in watcher

     2.2 Update CLAUDE.md

     Update the existing C:\Users\Richard Wilks\R_PIPELINE\CLAUDE.md to include:
     - Watcher quick start
     - How to run Invoke-Build check.one
     - Integration with existing SafePatch pipeline

     ---
     Phase 3: Testing & Polish (1-2 hours)

     3.1 Create Test Files

     # test_sample.py
     def add(a: int, b: int) -> int:
         return a + b

     def test_add():
         assert add(2, 3) == 5

     # test_sample.ps1
     function Get-Sum {
         param([int]$a, [int]$b)
         return $a + $b
     }

     3.2 Verify Workflow

     # Test single file check
     Invoke-Build check.one -Path test_sample.py

     # Start watcher (in separate terminal)
     .\watcher\watch.ps1

     # Make edits, verify automatic checking

     3.3 CI Integration

     Update .github/workflows/ci.yml (or create if missing):

     name: CI
     on: [push, pull_request]

     jobs:
       watcher-check:
         runs-on: windows-latest
         steps:
           - uses: actions/checkout@v3
           - name: Install Invoke-Build
             run: Install-Module -Name InvokeBuild -Force
           - name: Run all checks
             run: Invoke-Build ci
             working-directory: ./watcher

     ---
     Key Differences from Original Plan

     | Aspect             | Original Plan             | New Streamlined Plan   |
     |--------------------|---------------------------|------------------------|
     | Total files        | 41 new files              | 15 new files           |
     | Modules            | 24 modules with Two-ID    | None - use task runner |
     | Phases             | 7 development phases      | 3 development phases   |
     | Setup time         | 6-8 weeks                 | 1 day                  |
     | Orchestration      | Custom /orchestrator/     | Invoke-Build native    |
     | Adapters           | Custom adapter layer      | Direct tool calls      |
     | Registry           | registry.yaml + nameguard | Not needed             |
     | SPEC-1 integration | Replace SafePatch         | Reuse SafePatch        |

     ---
     File Structure After Implementation

     C:\Users\Richard Wilks\R_PIPELINE\
     ├── CLAUDE.md (updated with watcher info)
     ├── README.md
     ├── SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP/  (existing, keep as-is)
     │   ├── .mcp/                   (existing MCP servers)
     │   ├── mcp-servers/            (existing)
     │   ├── policy/                 (existing policies)
     │   ├── scripts/validation/     (existing SafePatch)
     │   ├── tools/                  (existing quality tools)
     │   └── ...                     (all existing structure)
     ├── watcher/                    (NEW - 15 files total)
     │   ├── build.ps1               (SSOT orchestrator)
     │   ├── watch.ps1               (File watcher)
     │   ├── watch.config.json
     │   ├── watch.ignore
     │   ├── pyproject.toml          (Python tool configs)
     │   ├── PSScriptAnalyzer.psd1   (PowerShell tool configs)
     │   ├── .gitignore
     │   └── README.md
     └── .runs/                      (NEW - output directory)
         ├── watch/                  (watcher results)
         └── ci/                     (CI results)

     Total new files: 15 (not 41)

     ---
     Success Criteria

     After 1 day of implementation:

     - Watcher detects file saves
     - Routes to correct toolchain (Python/PowerShell)
     - Calls existing SPEC-1 SafePatch validation
     - Results written to .runs/watch/*.json
     - CI workflow mirrors local checks
     - Latency < 2 seconds per file
     - Team can run Invoke-Build check.one --path file.py

     ---
     Migration from Any Existing Work

     If you've started implementing the 24-module system:

     Week 1: 
     - Create /watcher/ with streamlined approach
     - Run in parallel with existing code
     - Compare results

     Week 2:
     - Validate equivalence
     - Update CI to use watcher
     - Archive old implementation

     No breaking changes to SPEC-1 infrastructure

     ---
     Next Steps (Priority Order)

     1. Choose SSOT - Invoke-Build (PowerShell) or pyinvoke (Python)
     2. Create /watcher/ directory
     3. Copy templates from quick_start_guide.md
     4. Integrate with existing SPEC-1 validation scripts
     5. Test with 2-3 files
     6. Start watcher, verify automatic checks
     7. Update CLAUDE.md with new workflow
     8. Add CI integration

     Time estimate: 1 day (6-8 hours) total

     ---
     Questions to Resolve

     1. SSOT Choice: PowerShell (Invoke-Build) or Python (pyinvoke)?
       - Recommendation: Invoke-Build based on existing PowerShell heavy codebase
     2. SPEC-1 Structure: Flatten nested directories?
       - Recommendation: Yes, simplifies paths
     3. Integration Level: Call individual SPEC-1 scripts or Verify.ps1?
       - Recommendation: Call individual scripts for granularity
     4. CI Strategy: Replace existing CI or run watcher alongside?
       - Recommendation: Add watcher workflow, keep existing SafePatch CI
  ⎿

● Excellent! Let's implement the streamlined approach. I'll start by creating a todo list to track our progress.
  ⎿  Interrupted · What should Claude do instead?

> does this plan create a identifier for each module folder like it does for the files. the folders need an idetify that coresponds with the 
identifer for the files that will be inside, clear understandin of what file go to what module and what folder the are located in, can you 
create a plan that adds this with out breaking anythin in the pervious plan 

● You're absolutely right! The streamlined plan I provided eliminated the modular structure entirely, but you need both:
  - ✅ The streamlined watcher (fast, simple)
  - ✅ The modular structure with Two-ID identifiers (organized, scalable)

  Let me read the current structure again and create a comprehensive plan that adds Two-ID module identifiers without breaking the watcher
  approach.

● Read(madchat4.md)
  ⎿  Read 100 lines

● Read(madchat5.md)
  ⎿  Read 100 lines

● Now I understand! You want both systems working together:
  - ✅ Streamlined watcher (for fast feedback)
  - ✅ Modular structure with Two-ID naming (for organization & scalability)

  Let me create a comprehensive plan that adds Two-ID module folder identifiers while keeping the watcher approach intact.
  ⎿  User rejected Claude's plan:
     ╭─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
     │ Complete Plan: Streamlined Watcher + Two-ID Modular Structure                                                                               │
     │                                                                                                                                             │
     │ Overview                                                                                                                                    │
     │                                                                                                                                             │
     │ Implement both systems working together:                                                                                                    │
     │ 1. Streamlined watcher (/watcher/) - Fast file-watching with Invoke-Build                                                                   │
     │ 2. Modular structure (/modules/) - 24 modules with Two-ID naming                                                                            │
     │ 3. Registry system (registry.yaml) - Maps module names → Two-IDs → folder locations                                                         │
     │ 4. Nameguard tool - Enforces Two-ID naming automatically                                                                                    │
     │                                                                                                                                             │
     │ Key Principle: Clear Identifier Hierarchy                                                                                                   │
     │                                                                                                                                             │
     │ Registry Entry → Folder Name → File Prefix → Clear Mapping                                                                                  │
     │                                                                                                                                             │
     │ Example:                                                                                                                                    │
     │ registry.yaml:                                                                                                                              │
     │   domain_router: { mnemonic: DR, hash: 5K9, phase: 1, color: "#2ca02c" }                                                                    │
     │                                                                                                                                             │
     │ Folder Name:                                                                                                                                │
     │   /modules/phase_1_intake_routing/domain_router_DR-5K9/                                                                                     │
     │                                                                                                                                             │
     │ File Names Inside:                                                                                                                          │
     │   DR-5K9.run.py                                                                                                                             │
     │   DR-5K9.config.yaml                                                                                                                        │
     │   DR-5K9.schema.contract.json                                                                                                               │
     │   DR-5K9.example.input.json                                                                                                                 │
     │                                                                                                                                             │
     │ Clear Understanding:                                                                                                                        │
     │   • Module: domain_router                                                                                                                   │
     │   • Two-ID: DR-5K9                                                                                                                          │
     │   • Folder: domain_router_DR-5K9                                                                                                            │
     │   • All files prefixed with: DR-5K9                                                                                                         │
     │                                                                                                                                             │
     │ ---                                                                                                                                         │
     │ Phase 1: Create Registry & Naming System (2-3 hours)                                                                                        │
     │                                                                                                                                             │
     │ 1.1 Create Registry File                                                                                                                    │
     │                                                                                                                                             │
     │ New file: /modules/registry.yaml                                                                                                            │
     │                                                                                                                                             │
     │ # Module Registry - Single Source of Truth for Two-IDs                                                                                      │
     │ # Format: module_key: { mnemonic, hash, phase, color }                                                                                      │
     │                                                                                                                                             │
     │ metadata:                                                                                                                                   │
     │   version: "1.0.0"                                                                                                                          │
     │   generated: "2025-01-26"                                                                                                                   │
     │   total_modules: 24                                                                                                                         │
     │                                                                                                                                             │
     │ modules:                                                                                                                                    │
     │   # Phase 0: Backplane (5 modules)                                                                                                          │
     │   ledger:                                                                                                                                   │
     │     mnemonic: LD                                                                                                                            │
     │     hash: 3X7                                                                                                                               │
     │     phase: 0                                                                                                                                │
     │     color: "#808080"                                                                                                                        │
     │     description: "Append-only event ledger"                                                                                                 │
     │                                                                                                                                             │
     │   policy_pack:                                                                                                                              │
     │     mnemonic: PP                                                                                                                            │
     │     hash: 9K2                                                                                                                               │
     │     phase: 0                                                                                                                                │
     │     color: "#A9A9A9"                                                                                                                        │
     │     description: "Policy-as-code enforcement"                                                                                               │
     │                                                                                                                                             │
     │   cache_ratelimit:                                                                                                                          │
     │     mnemonic: CR                                                                                                                            │
     │     hash: 4Y8                                                                                                                               │
     │     phase: 0                                                                                                                                │
     │     color: "#778899"                                                                                                                        │
     │     description: "Cache and rate limiting"                                                                                                  │
     │                                                                                                                                             │
     │   concurrency_controller:                                                                                                                   │
     │     mnemonic: CC                                                                                                                            │
     │     hash: 2Z5                                                                                                                               │
     │     phase: 0                                                                                                                                │
     │     color: "#696969"                                                                                                                        │
     │     description: "Concurrency and locking"                                                                                                  │
     │                                                                                                                                             │
     │   observability:                                                                                                                            │
     │     mnemonic: OB                                                                                                                            │
     │     hash: 6W1                                                                                                                               │
     │     phase: 0                                                                                                                                │
     │     color: "#2F4F4F"                                                                                                                        │
     │     description: "Metrics and monitoring"                                                                                                   │
     │                                                                                                                                             │
     │   # Phase 1: Intake & Routing (5 modules)                                                                                                   │
     │   plan_ingestor:                                                                                                                            │
     │     mnemonic: PI                                                                                                                            │
     │     hash: 5K9                                                                                                                               │
     │     phase: 1                                                                                                                                │
     │     color: "#1f77b4"                                                                                                                        │
     │     description: "Parse and normalize change plans"                                                                                         │
     │                                                                                                                                             │
     │   workstream_planner:                                                                                                                       │
     │     mnemonic: WP                                                                                                                            │
     │     hash: A2F                                                                                                                               │
     │     phase: 1                                                                                                                                │
     │     color: "#ff7f0e"                                                                                                                        │
     │     description: "Partition work into streams"                                                                                              │
     │                                                                                                                                             │
     │   domain_router:                                                                                                                            │
     │     mnemonic: DR                                                                                                                            │
     │     hash: 2QJ                                                                                                                               │
     │     phase: 1                                                                                                                                │
     │     color: "#2ca02c"                                                                                                                        │
     │     description: "Route files to domains"                                                                                                   │
     │                                                                                                                                             │
     │   goal_normalizer:                                                                                                                          │
     │     mnemonic: GN                                                                                                                            │
     │     hash: 7M3                                                                                                                               │
     │     phase: 1                                                                                                                                │
     │     color: "#d62728"                                                                                                                        │
     │     description: "Normalize goal vocabulary"                                                                                                │
     │                                                                                                                                             │
     │   query_expander:                                                                                                                           │
     │     mnemonic: QE                                                                                                                            │
     │     hash: 8P4                                                                                                                               │
     │     phase: 1                                                                                                                                │
     │     color: "#9467bd"                                                                                                                        │
     │     description: "Expand search queries"                                                                                                    │
     │                                                                                                                                             │
     │   # Phase 2: Discovery & Scoring (3 modules)                                                                                                │
     │   discovery_adapters:                                                                                                                       │
     │     mnemonic: DA                                                                                                                            │
     │     hash: 1R6                                                                                                                               │
     │     phase: 2                                                                                                                                │
     │     color: "#8c564b"                                                                                                                        │
     │     description: "GitHub/PyPI/docs adapters"                                                                                                │
     │                                                                                                                                             │
     │   feature_extractors:                                                                                                                       │
     │     mnemonic: FE                                                                                                                            │
     │     hash: 3S8                                                                                                                               │
     │     phase: 2                                                                                                                                │
     │     color: "#e377c2"                                                                                                                        │
     │     description: "Extract repo features"                                                                                                    │
     │                                                                                                                                             │
     │   scorer:                                                                                                                                   │
     │     mnemonic: SC                                                                                                                            │
     │     hash: 4T9                                                                                                                               │
     │     phase: 2                                                                                                                                │
     │     color: "#7f7f7f"                                                                                                                        │
     │     description: "Score and rank candidates"                                                                                                │
     │                                                                                                                                             │
     │   # Phase 3: Synthesis & Patching (2 modules)                                                                                               │
     │   synthesizer:                                                                                                                              │
     │     mnemonic: SY                                                                                                                            │
     │     hash: 5U1                                                                                                                               │
     │     phase: 3                                                                                                                                │
     │     color: "#bcbd22"                                                                                                                        │
     │     description: "Generate code from templates"                                                                                             │
     │                                                                                                                                             │
     │   structured_patcher:                                                                                                                       │
     │     mnemonic: SP                                                                                                                            │
     │     hash: 6V2                                                                                                                               │
     │     phase: 3                                                                                                                                │
     │     color: "#17becf"                                                                                                                        │
     │     description: "Apply AST-aware patches"                                                                                                  │
     │                                                                                                                                             │
     │   # Phase 4: Quality Gates (3 modules)                                                                                                      │
     │   guardrails:                                                                                                                               │
     │     mnemonic: GR                                                                                                                            │
     │     hash: 7W3                                                                                                                               │
     │     phase: 4                                                                                                                                │
     │     color: "#d62728"                                                                                                                        │
     │     description: "Pre-validation checks"                                                                                                    │
     │                                                                                                                                             │
     │   verifier:                                                                                                                                 │
     │     mnemonic: VR                                                                                                                            │
     │     hash: 8X4                                                                                                                               │
     │     phase: 4                                                                                                                                │
     │     color: "#ff7f0e"                                                                                                                        │
     │     description: "Run quality tools"                                                                                                        │
     │                                                                                                                                             │
     │   error_auto_repair:                                                                                                                        │
     │     mnemonic: ER                                                                                                                            │
     │     hash: 9Y5                                                                                                                               │
     │     phase: 4                                                                                                                                │
     │     color: "#2ca02c"                                                                                                                        │
     │     description: "Auto-fix common errors"                                                                                                   │
     │                                                                                                                                             │
     │   # Phase 5: Decision & Export (3 modules)                                                                                                  │
     │   selector:                                                                                                                                 │
     │     mnemonic: SL                                                                                                                            │
     │     hash: 1Z6                                                                                                                               │
     │     phase: 5                                                                                                                                │
     │     color: "#1f77b4"                                                                                                                        │
     │     description: "Select champion solution"                                                                                                 │
     │                                                                                                                                             │
     │   exporter:                                                                                                                                 │
     │     mnemonic: EX                                                                                                                            │
     │     hash: 2A7                                                                                                                               │
     │     phase: 5                                                                                                                                │
     │     color: "#9467bd"                                                                                                                        │
     │     description: "Export artifacts"                                                                                                         │
     │                                                                                                                                             │
     │   provenance_rollback:                                                                                                                      │
     │     mnemonic: PR                                                                                                                            │
     │     hash: 3B8                                                                                                                               │
     │     phase: 5                                                                                                                                │
     │     color: "#8c564b"                                                                                                                        │
     │     description: "Provenance tracking and rollback"                                                                                         │
     │                                                                                                                                             │
     │   # Phase 6: Knowledge & CI (3 modules)                                                                                                     │
     │   knowledge_reuse:                                                                                                                          │
     │     mnemonic: KR                                                                                                                            │
     │     hash: 4C9                                                                                                                               │
     │     phase: 6                                                                                                                                │
     │     color: "#e377c2"                                                                                                                        │
     │     description: "Reuse proven solutions"                                                                                                   │
     │                                                                                                                                             │
     │   playbook_promoter:                                                                                                                        │
     │     mnemonic: PB                                                                                                                            │
     │     hash: 5D1                                                                                                                               │
     │     phase: 6                                                                                                                                │
     │     color: "#7f7f7f"                                                                                                                        │
     │     description: "Promote to playbooks"                                                                                                     │
     │                                                                                                                                             │
     │   ci_precommit_integrator:                                                                                                                  │
     │     mnemonic: CI                                                                                                                            │
     │     hash: 6E2                                                                                                                               │
     │     phase: 6                                                                                                                                │
     │     color: "#bcbd22"                                                                                                                        │
     │     description: "CI/pre-commit integration"                                                                                                │
     │                                                                                                                                             │
     │ 1.2 Create Folder Naming Convention Document                                                                                                │
     │                                                                                                                                             │
     │ New file: /modules/NAMING_CONVENTION.md                                                                                                     │
     │                                                                                                                                             │
     │ # Two-ID Module Naming Convention                                                                                                           │
     │                                                                                                                                             │
     │ ## Folder Naming Pattern                                                                                                                    │
     │                                                                                                                                             │
     │ Format: `{module_key}_{TID}/`                                                                                                               │
     │                                                                                                                                             │
     │ Example: `domain_router_DR-2QJ/`                                                                                                            │
     │                                                                                                                                             │
     │ Components:                                                                                                                                 │
     │ - `module_key`: Human-readable name (matches registry.yaml key)                                                                             │
     │ - `TID`: Two-ID from registry (mnemonic-hash, e.g., DR-2QJ)                                                                                 │
     │                                                                                                                                             │
     │ ## File Naming Pattern                                                                                                                      │
     │                                                                                                                                             │
     │ Format: `{TID}.{role}[.{name}].{ext}`                                                                                                       │
     │                                                                                                                                             │
     │ Roles (enum):                                                                                                                               │
     │ - `run` - Main entrypoint                                                                                                                   │
     │ - `config` - Configuration file                                                                                                             │
     │ - `schema` - JSON Schema (contract, input, output)                                                                                          │
     │ - `example` - Example payloads                                                                                                              │
     │ - `rules` - Business logic rules                                                                                                            │
     │ - `adapter` - External service adapters                                                                                                     │
     │ - `renderer` - Template renderers                                                                                                           │
     │ - `patcher` - Code patching logic                                                                                                           │
     │ - `guard` - Validation guards                                                                                                               │
     │ - `verify` - Verification scripts                                                                                                           │
     │                                                                                                                                             │
     │ Examples for domain_router (DR-2QJ):                                                                                                        │
     │ - `DR-2QJ.run.py`                                                                                                                           │
     │ - `DR-2QJ.config.yaml`                                                                                                                      │
     │ - `DR-2QJ.schema.contract.json`                                                                                                             │
     │ - `DR-2QJ.example.input.json`                                                                                                               │
     │ - `DR-2QJ.rules.yaml`                                                                                                                       │
     │ - `DR-2QJ.adapter.github.py`                                                                                                                │
     │                                                                                                                                             │
     │ ## Registry Lookup                                                                                                                          │
     │                                                                                                                                             │
     │ File → Module → Folder mapping:                                                                                                             │
     │                                                                                                                                             │
     │ 1. **File**: `DR-2QJ.run.py`                                                                                                                │
     │ 2. **Registry lookup**: `DR-2QJ` → `domain_router`                                                                                          │
     │ 3. **Folder**: `modules/phase_1_intake_routing/domain_router_DR-2QJ/`                                                                       │
     │                                                                                                                                             │
     │ Reverse lookup (folder → files):                                                                                                            │
     │                                                                                                                                             │
     │ 1. **Folder**: `domain_router_DR-2QJ`                                                                                                       │
     │ 2. **Extract TID**: `DR-2QJ`                                                                                                                │
     │ 3. **Expected files**: All files prefixed with `DR-2QJ.`                                                                                    │
     │                                                                                                                                             │
     │ ## Validation Rules                                                                                                                         │
     │                                                                                                                                             │
     │ ✅ Valid:                                                                                                                                    │
     │ - Folder: `domain_router_DR-2QJ/`                                                                                                           │
     │ - Files inside: `DR-2QJ.*.{py,yaml,json}`                                                                                                   │
     │                                                                                                                                             │
     │ ❌ Invalid:                                                                                                                                  │
     │ - Folder: `domain_router/` (missing TID)                                                                                                    │
     │ - Files: `run.py` (missing TID prefix)                                                                                                      │
     │ - Mismatched: `domain_router_DR-2QJ/` contains `WP-A2F.run.py` (wrong TID)                                                                  │
     │                                                                                                                                             │
     │ 1.3 Create Directory Structure with Two-ID Folders                                                                                          │
     │                                                                                                                                             │
     │ C:\Users\Richard Wilks\R_PIPELINE\                                                                                                          │
     │ ├── modules/                                                                                                                                │
     │ │   ├── registry.yaml                      (NEW - Single source of truth)                                                                   │
     │ │   ├── NAMING_CONVENTION.md               (NEW - Documentation)                                                                            │
     │ │   │                                                                                                                                       │
     │ │   ├── phase_0_backplane/                                                                                                                  │
     │ │   │   ├── ledger_LD-3X7/                 (Two-ID in folder name)                                                                          │
     │ │   │   │   ├── LD-3X7.run.py                                                                                                               │
     │ │   │   │   ├── LD-3X7.config.yaml                                                                                                          │
     │ │   │   │   ├── LD-3X7.schema.ledger.json                                                                                                   │
     │ │   │   │   ├── LD-3X7.append.py                                                                                                            │
     │ │   │   │   └── api.py                     (Stable import - generated)                                                                      │
     │ │   │   │                                                                                                                                   │
     │ │   │   ├── policy_pack_PP-9K2/                                                                                                             │
     │ │   │   │   ├── PP-9K2.run.py                                                                                                               │
     │ │   │   │   ├── PP-9K2.config.yaml                                                                                                          │
     │ │   │   │   └── api.py                                                                                                                      │
     │ │   │   │                                                                                                                                   │
     │ │   │   ├── cache_ratelimit_CR-4Y8/                                                                                                         │
     │ │   │   ├── concurrency_controller_CC-2Z5/                                                                                                  │
     │ │   │   └── observability_OB-6W1/                                                                                                           │
     │ │   │                                                                                                                                       │
     │ │   ├── phase_1_intake_routing/                                                                                                             │
     │ │   │   ├── plan_ingestor_PI-5K9/                                                                                                           │
     │ │   │   │   ├── PI-5K9.run.py                                                                                                               │
     │ │   │   │   ├── PI-5K9.config.yaml                                                                                                          │
     │ │   │   │   ├── PI-5K9.schema.contract.json                                                                                                 │
     │ │   │   │   ├── PI-5K9.example.input.json                                                                                                   │
     │ │   │   │   └── api.py                                                                                                                      │
     │ │   │   │                                                                                                                                   │
     │ │   │   ├── workstream_planner_WP-A2F/                                                                                                      │
     │ │   │   ├── domain_router_DR-2QJ/                                                                                                           │
     │ │   │   ├── goal_normalizer_GN-7M3/                                                                                                         │
     │ │   │   └── query_expander_QE-8P4/                                                                                                          │
     │ │   │                                                                                                                                       │
     │ │   ├── phase_2_discovery_scoring/                                                                                                          │
     │ │   │   ├── discovery_adapters_DA-1R6/                                                                                                      │
     │ │   │   ├── feature_extractors_FE-3S8/                                                                                                      │
     │ │   │   └── scorer_SC-4T9/                                                                                                                  │
     │ │   │                                                                                                                                       │
     │ │   ├── phase_3_synthesis_patch/                                                                                                            │
     │ │   │   ├── synthesizer_SY-5U1/                                                                                                             │
     │ │   │   └── structured_patcher_SP-6V2/                                                                                                      │
     │ │   │                                                                                                                                       │
     │ │   ├── phase_4_quality_gates/                                                                                                              │
     │ │   │   ├── guardrails_GR-7W3/                                                                                                              │
     │ │   │   ├── verifier_VR-8X4/                                                                                                                │
     │ │   │   └── error_auto_repair_ER-9Y5/                                                                                                       │
     │ │   │                                                                                                                                       │
     │ │   ├── phase_5_decision_export/                                                                                                            │
     │ │   │   ├── selector_SL-1Z6/                                                                                                                │
     │ │   │   ├── exporter_EX-2A7/                                                                                                                │
     │ │   │   └── provenance_rollback_PR-3B8/                                                                                                     │
     │ │   │                                                                                                                                       │
     │ │   └── phase_6_knowledge_ci/                                                                                                               │
     │ │       ├── knowledge_reuse_KR-4C9/                                                                                                         │
     │ │       ├── playbook_promoter_PB-5D1/                                                                                                       │
     │ │       └── ci_precommit_integrator_CI-6E2/                                                                                                 │
     │                                                                                                                                             │
     │ ---                                                                                                                                         │
     │ Phase 2: Create Nameguard Enforcement Tool (3-4 hours)                                                                                      │
     │                                                                                                                                             │
     │ 2.1 Create Nameguard Tool                                                                                                                   │
     │                                                                                                                                             │
     │ New file: /tools/nameguard/nameguard.py                                                                                                     │
     │                                                                                                                                             │
     │ #!/usr/bin/env python3                                                                                                                      │
     │ """                                                                                                                                         │
     │ Nameguard - Two-ID Naming Convention Enforcer                                                                                               │
     │                                                                                                                                             │
     │ Ensures all module folders and files follow the Two-ID naming convention.                                                                   │
     │ """                                                                                                                                         │
     │                                                                                                                                             │
     │ import yaml                                                                                                                                 │
     │ import json                                                                                                                                 │
     │ import re                                                                                                                                   │
     │ from pathlib import Path                                                                                                                    │
     │ from typing import Dict, List, Tuple                                                                                                        │
     │ import hashlib                                                                                                                              │
     │                                                                                                                                             │
     │ # Validation regex from chat 4                                                                                                              │
     │ FILE_PATTERN = re.compile(                                                                                                                  │
     │     r'^([A-Z]{2}-[A-Z0-9]{3})\.(run|config|schema|example|rules|adapter|renderer|patcher|guard|verify)(\.[a-z0-9_-]+)?\.(py|ps1|json|ya?ml| │
     │ toml)$'                                                                                                                                     │
     │ )                                                                                                                                           │
     │                                                                                                                                             │
     │ FOLDER_PATTERN = re.compile(                                                                                                                │
     │     r'^([a-z_]+)_([A-Z]{2}-[A-Z0-9]{3})$'                                                                                                   │
     │ )                                                                                                                                           │
     │                                                                                                                                             │
     │ class Nameguard:                                                                                                                            │
     │     def __init__(self, registry_path: Path):                                                                                                │
     │         with open(registry_path) as f:                                                                                                      │
     │             data = yaml.safe_load(f)                                                                                                        │
     │         self.modules = data['modules']                                                                                                      │
     │         self.tid_to_module = {                                                                                                              │
     │             f"{info['mnemonic']}-{info['hash']}": module_key                                                                                │
     │             for module_key, info in self.modules.items()                                                                                    │
     │         }                                                                                                                                   │
     │                                                                                                                                             │
     │     def validate_folder(self, folder_path: Path) -> Tuple[bool, str]:                                                                       │
     │         """Validate folder name matches convention."""                                                                                      │
     │         folder_name = folder_path.name                                                                                                      │
     │         match = FOLDER_PATTERN.match(folder_name)                                                                                           │
     │                                                                                                                                             │
     │         if not match:                                                                                                                       │
     │             return False, f"Folder name '{folder_name}' doesn't match pattern: {{module_key}}_{{TID}}"                                      │
     │                                                                                                                                             │
     │         module_key, tid = match.groups()                                                                                                    │
     │                                                                                                                                             │
     │         # Check TID exists in registry                                                                                                      │
     │         if tid not in self.tid_to_module:                                                                                                   │
     │             return False, f"TID '{tid}' not found in registry"                                                                              │
     │                                                                                                                                             │
     │         # Check module_key matches registry                                                                                                 │
     │         expected_module = self.tid_to_module[tid]                                                                                           │
     │         if module_key != expected_module:                                                                                                   │
     │             return False, f"Module key mismatch: folder has '{module_key}', registry expects '{expected_module}' for TID '{tid}'"           │
     │                                                                                                                                             │
     │         return True, f"✓ Folder '{folder_name}' is valid"                                                                                   │
     │                                                                                                                                             │
     │     def validate_file(self, file_path: Path, parent_folder: Path) -> Tuple[bool, str]:                                                      │
     │         """Validate file name matches convention and parent folder."""                                                                      │
     │         file_name = file_path.name                                                                                                          │
     │                                                                                                                                             │
     │         # Skip special files                                                                                                                │
     │         if file_name in ['api.py', '__init__.py', 'README.md', '.gitignore']:                                                               │
     │             return True, f"✓ Special file '{file_name}' allowed"                                                                            │
     │                                                                                                                                             │
     │         match = FILE_PATTERN.match(file_name)                                                                                               │
     │         if not match:                                                                                                                       │
     │             return False, f"File name '{file_name}' doesn't match pattern: {{TID}}.{{role}}[.{{name}}].{{ext}}"                             │
     │                                                                                                                                             │
     │         file_tid = match.group(1)                                                                                                           │
     │                                                                                                                                             │
     │         # Extract TID from parent folder                                                                                                    │
     │         folder_match = FOLDER_PATTERN.match(parent_folder.name)                                                                             │
     │         if not folder_match:                                                                                                                │
     │             return False, f"Parent folder '{parent_folder.name}' is invalid"                                                                │
     │                                                                                                                                             │
     │         folder_tid = folder_match.group(2)                                                                                                  │
     │                                                                                                                                             │
     │         # Check TID matches folder                                                                                                          │
     │         if file_tid != folder_tid:                                                                                                          │
     │             return False, f"TID mismatch: file has '{file_tid}', folder expects '{folder_tid}'"                                             │
     │                                                                                                                                             │
     │         return True, f"✓ File '{file_name}' matches folder TID"                                                                             │
     │                                                                                                                                             │
     │     def scan_modules(self, modules_path: Path) -> Dict[str, List[str]]:                                                                     │
     │         """Scan all modules and return validation results."""                                                                               │
     │         results = {                                                                                                                         │
     │             'valid_folders': [],                                                                                                            │
     │             'invalid_folders': [],                                                                                                          │
     │             'valid_files': [],                                                                                                              │
     │             'invalid_files': [],                                                                                                            │
     │             'errors': []                                                                                                                    │
     │         }                                                                                                                                   │
     │                                                                                                                                             │
     │         # Find all module folders                                                                                                           │
     │         for phase_dir in modules_path.glob('phase_*'):                                                                                      │
     │             for module_dir in phase_dir.iterdir():                                                                                          │
     │                 if not module_dir.is_dir():                                                                                                 │
     │                     continue                                                                                                                │
     │                                                                                                                                             │
     │                 # Validate folder                                                                                                           │
     │                 is_valid, message = self.validate_folder(module_dir)                                                                        │
     │                 if is_valid:                                                                                                                │
     │                     results['valid_folders'].append(message)                                                                                │
     │                 else:                                                                                                                       │
     │                     results['invalid_folders'].append(message)                                                                              │
     │                     results['errors'].append(f"ERROR: {message}")                                                                           │
     │                                                                                                                                             │
     │                 # Validate files in folder                                                                                                  │
     │                 for file in module_dir.rglob('*'):                                                                                          │
     │                     if file.is_file():                                                                                                      │
     │                         is_valid, message = self.validate_file(file, module_dir)                                                            │
     │                         if is_valid:                                                                                                        │
     │                             results['valid_files'].append(message)                                                                          │
     │                         else:                                                                                                               │
     │                             results['invalid_files'].append(message)                                                                        │
     │                             results['errors'].append(f"ERROR: {message}")                                                                   │
     │                                                                                                                                             │
     │         return results                                                                                                                      │
     │                                                                                                                                             │
     │     def generate_api_py(self, module_folder: Path) -> str:                                                                                  │
     │         """Generate api.py for stable imports."""                                                                                           │
     │         folder_match = FOLDER_PATTERN.match(module_folder.name)                                                                             │
     │         if not folder_match:                                                                                                                │
     │             raise ValueError(f"Invalid folder name: {module_folder.name}")                                                                  │
     │                                                                                                                                             │
     │         module_key, tid = folder_match.groups()                                                                                             │
     │                                                                                                                                             │
     │         # Find all .run.py files                                                                                                            │
     │         api_lines = [                                                                                                                       │
     │             '"""',                                                                                                                          │
     │             f'Stable API surface for {module_key} ({tid})',                                                                                 │
     │             'Auto-generated by nameguard - DO NOT EDIT',                                                                                    │
     │             '"""',                                                                                                                          │
     │             ''                                                                                                                              │
     │         ]                                                                                                                                   │
     │                                                                                                                                             │
     │         for file in module_folder.glob(f'{tid}.*.py'):                                                                                      │
     │             if '.run.' in file.name:                                                                                                        │
     │                 api_lines.append(f'from .{file.stem} import main as run')                                                                   │
     │             elif '.config.' not in file.name and '.schema.' not in file.name:                                                               │
     │                 # Import other modules generically                                                                                          │
     │                 safe_name = file.stem.replace(f'{tid}.', '').replace('.', '_')                                                              │
     │                 api_lines.append(f'from .{file.stem} import * as {safe_name}')                                                              │
     │                                                                                                                                             │
     │         return '\n'.join(api_lines)                                                                                                         │
     │                                                                                                                                             │
     │ def main():                                                                                                                                 │
     │     import argparse                                                                                                                         │
     │                                                                                                                                             │
     │     parser = argparse.ArgumentParser(description='Nameguard - Two-ID naming enforcer')                                                      │
     │     parser.add_argument('--check', action='store_true', help='Check all modules')                                                           │
     │     parser.add_argument('--fix', action='store_true', help='Auto-fix issues')                                                               │
     │     parser.add_argument('--generate-api', action='store_true', help='Generate api.py files')                                                │
     │     parser.add_argument('--modules-path', default='./modules', help='Path to modules directory')                                            │
     │     parser.add_argument('--registry', default='./modules/registry.yaml', help='Path to registry.yaml')                                      │
     │                                                                                                                                             │
     │     args = parser.parse_args()                                                                                                              │
     │                                                                                                                                             │
     │     registry_path = Path(args.registry)                                                                                                     │
     │     modules_path = Path(args.modules_path)                                                                                                  │
     │                                                                                                                                             │
     │     guard = Nameguard(registry_path)                                                                                                        │
     │                                                                                                                                             │
     │     if args.check:                                                                                                                          │
     │         results = guard.scan_modules(modules_path)                                                                                          │
     │                                                                                                                                             │
     │         print(f"\\n=== Nameguard Validation Results ===")                                                                                   │
     │         print(f"Valid folders: {len(results['valid_folders'])}")                                                                            │
     │         print(f"Invalid folders: {len(results['invalid_folders'])}")                                                                        │
     │         print(f"Valid files: {len(results['valid_files'])}")                                                                                │
     │         print(f"Invalid files: {len(results['invalid_files'])}")                                                                            │
     │                                                                                                                                             │
     │         if results['errors']:                                                                                                               │
     │             print(f"\\n❌ ERRORS ({len(results['errors'])}):")                                                                               │
     │             for error in results['errors']:                                                                                                 │
     │                 print(f"  {error}")                                                                                                         │
     │             return 1                                                                                                                        │
     │         else:                                                                                                                               │
     │             print("\\n✓ All modules follow naming convention!")                                                                             │
     │             return 0                                                                                                                        │
     │                                                                                                                                             │
     │     if args.generate_api:                                                                                                                   │
     │         for phase_dir in modules_path.glob('phase_*'):                                                                                      │
     │             for module_dir in phase_dir.iterdir():                                                                                          │
     │                 if module_dir.is_dir():                                                                                                     │
     │                     api_content = guard.generate_api_py(module_dir)                                                                         │
     │                     api_file = module_dir / 'api.py'                                                                                        │
     │                     api_file.write_text(api_content)                                                                                        │
     │                     print(f"✓ Generated {api_file}")                                                                                        │
     │         return 0                                                                                                                            │
     │                                                                                                                                             │
     │ if __name__ == '__main__':                                                                                                                  │
     │     exit(main())                                                                                                                            │
     │                                                                                                                                             │
     │ 2.2 Create Nameguard Config                                                                                                                 │
     │                                                                                                                                             │
     │ New file: /tools/nameguard/nameguard.config.yaml                                                                                            │
     │                                                                                                                                             │
     │ # Nameguard Configuration                                                                                                                   │
     │                                                                                                                                             │
     │ validation:                                                                                                                                 │
     │   strict_mode: true                                                                                                                         │
     │   auto_fix: false                                                                                                                           │
     │   generate_api_on_check: true                                                                                                               │
     │                                                                                                                                             │
     │ patterns:                                                                                                                                   │
     │   folder: '^([a-z_]+)_([A-Z]{2}-[A-Z0-9]{3})$'                                                                                              │
     │   file: '^([A-Z]{2}-[A-Z0-9]{3})\.(run|config|schema|example|rules|adapter|renderer|patcher|guard|verify)(\.[a-z0-9_-]+)?\.(py|ps1|json|ya? │
     │ ml|toml)$'                                                                                                                                  │
     │                                                                                                                                             │
     │ allowed_special_files:                                                                                                                      │
     │   - api.py                                                                                                                                  │
     │   - __init__.py                                                                                                                             │
     │   - README.md                                                                                                                               │
     │   - .gitignore                                                                                                                              │
     │                                                                                                                                             │
     │ roles:                                                                                                                                      │
     │   - run                                                                                                                                     │
     │   - config                                                                                                                                  │
     │   - schema                                                                                                                                  │
     │   - example                                                                                                                                 │
     │   - rules                                                                                                                                   │
     │   - adapter                                                                                                                                 │
     │   - renderer                                                                                                                                │
     │   - patcher                                                                                                                                 │
     │   - guard                                                                                                                                   │
     │   - verify                                                                                                                                  │
     │   - select                                                                                                                                  │
     │   - export                                                                                                                                  │
     │   - ledger                                                                                                                                  │
     │   - policy                                                                                                                                  │
     │   - cache                                                                                                                                   │
     │   - ratelimit                                                                                                                               │
     │   - queue                                                                                                                                   │
     │   - autofix                                                                                                                                 │
     │   - harness                                                                                                                                 │
     │   - prov                                                                                                                                    │
     │   - rollback                                                                                                                                │
     │   - emitci                                                                                                                                  │
     │   - emitpre                                                                                                                                 │
     │   - metrics                                                                                                                                 │
     │   - reuse                                                                                                                                   │
     │                                                                                                                                             │
     │ ---                                                                                                                                         │
     │ Phase 3: Integrate Watcher with Modular Structure (2-3 hours)                                                                               │
     │                                                                                                                                             │
     │ 3.1 Update Watcher to Call Modules                                                                                                          │
     │                                                                                                                                             │
     │ Updated file: /watcher/build.ps1                                                                                                            │
     │                                                                                                                                             │
     │ #Requires -Version 5.1                                                                                                                      │
     │ #Requires -Modules InvokeBuild                                                                                                              │
     │                                                                                                                                             │
     │ param(                                                                                                                                      │
     │     [string]$Path,                                                                                                                          │
     │     [switch]$Strict                                                                                                                         │
     │ )                                                                                                                                           │
     │                                                                                                                                             │
     │ Set-StrictMode -Version Latest                                                                                                              │
     │ $ErrorActionPreference = 'Stop'                                                                                                             │
     │                                                                                                                                             │
     │ # Load registry for module lookups                                                                                                          │
     │ $RegistryPath = "$PSScriptRoot/../modules/registry.yaml"                                                                                    │
     │ if (Test-Path $RegistryPath) {                                                                                                              │
     │     # Note: You'll need powershell-yaml module or ConvertFrom-Yaml                                                                          │
     │     # For now, hardcode module paths                                                                                                        │
     │     $ModulePaths = @{                                                                                                                       │
     │         'python'     = "$PSScriptRoot/../modules/phase_4_quality_gates/verifier_VR-8X4/VR-8X4.run.py"                                       │
     │         'powershell' = "$PSScriptRoot/../SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-/scripts/validation/Invoke-SafePatchValidation.ps1"       │
     │     }                                                                                                                                       │
     │ } else {                                                                                                                                    │
     │     Write-Warning "Registry not found at $RegistryPath"                                                                                     │
     │ }                                                                                                                                           │
     │                                                                                                                                             │
     │ # ============================================================================                                                              │
     │ # ROUTING                                                                                                                                   │
     │ # ============================================================================                                                              │
     │                                                                                                                                             │
     │ function Get-Toolchain {                                                                                                                    │
     │     param([string]$FilePath)                                                                                                                │
     │                                                                                                                                             │
     │     switch -Regex ($FilePath) {                                                                                                             │
     │         '\.(py)$'              { 'python' }                                                                                                 │
     │         '\.(ps1|psm1|psd1)$'   { 'powershell' }                                                                                             │
     │         default                { 'unknown' }                                                                                                │
     │     }                                                                                                                                       │
     │ }                                                                                                                                           │
     │                                                                                                                                             │
     │ # ============================================================================                                                              │
     │ # MODULE-BASED TASKS                                                                                                                        │
     │ # ============================================================================                                                              │
     │                                                                                                                                             │
     │ task python.verify {                                                                                                                        │
     │     # Call verifier module (VR-8X4)                                                                                                         │
     │     $verifierScript = $ModulePaths['python']                                                                                                │
     │                                                                                                                                             │
     │     if (Test-Path $verifierScript) {                                                                                                        │
     │         exec {                                                                                                                              │
     │             & python $verifierScript --input $Path --output ".runs/watch/verify.json"                                                       │
     │         }                                                                                                                                   │
     │     } else {                                                                                                                                │
     │         # Fallback to direct tool calls                                                                                                     │
     │         exec { ruff format $Path }                                                                                                          │
     │         exec { ruff check $Path }                                                                                                           │
     │         exec { pyright $Path }                                                                                                              │
     │     }                                                                                                                                       │
     │ }                                                                                                                                           │
     │                                                                                                                                             │
     │ task powershell.verify {                                                                                                                    │
     │     # Call existing SPEC-1 validation                                                                                                       │
     │     $safePatchScript = $ModulePaths['powershell']                                                                                           │
     │                                                                                                                                             │
     │     if (Test-Path $safePatchScript) {                                                                                                       │
     │         exec {                                                                                                                              │
     │             & $safePatchScript -Workspace $Path -VerboseOutput                                                                              │
     │         }                                                                                                                                   │
     │     } else {                                                                                                                                │
     │         # Fallback                                                                                                                          │
     │         exec { Invoke-ScriptAnalyzer -Path $Path }                                                                                          │
     │     }                                                                                                                                       │
     │ }                                                                                                                                           │
     │                                                                                                                                             │
     │ # ============================================================================                                                              │
     │ # UNIVERSAL CHECK                                                                                                                           │
     │ # ============================================================================                                                              │
     │                                                                                                                                             │
     │ task check.one {                                                                                                                            │
     │     param($Path)                                                                                                                            │
     │                                                                                                                                             │
     │     $toolchain = Get-Toolchain $Path                                                                                                        │
     │     $startTime = Get-Date                                                                                                                   │
     │                                                                                                                                             │
     │     $result = @{                                                                                                                            │
     │         timestamp = $startTime.ToString('o')                                                                                                │
     │         file = $Path                                                                                                                        │
     │         toolchain = $toolchain                                                                                                              │
     │         steps = @()                                                                                                                         │
     │     }                                                                                                                                       │
     │                                                                                                                                             │
     │     try {                                                                                                                                   │
     │         switch ($toolchain) {                                                                                                               │
     │             'python' {                                                                                                                      │
     │                 Invoke-Build python.verify -Result r                                                                                        │
     │                 $result.success = $r.Errors.Count -eq 0                                                                                     │
     │                 $result.steps = $r.Tasks | ForEach-Object {                                                                                 │
     │                     @{                                                                                                                      │
     │                         name = $_.Name                                                                                                      │
     │                         elapsed_ms = $_.Elapsed.TotalMilliseconds                                                                           │
     │                         success = $null -eq $_.Error                                                                                        │
     │                     }                                                                                                                       │
     │                 }                                                                                                                           │
     │             }                                                                                                                               │
     │             'powershell' {                                                                                                                  │
     │                 Invoke-Build powershell.verify -Result r                                                                                    │
     │                 $result.success = $r.Errors.Count -eq 0                                                                                     │
     │                 $result.steps = $r.Tasks | ForEach-Object {                                                                                 │
     │                     @{                                                                                                                      │
     │                         name = $_.Name                                                                                                      │
     │                         elapsed_ms = $_.Elapsed.TotalMilliseconds                                                                           │
     │                         success = $null -eq $_.Error                                                                                        │
     │                     }                                                                                                                       │
     │                 }                                                                                                                           │
     │             }                                                                                                                               │
     │             default {                                                                                                                       │
     │                 throw "Unknown toolchain for: $Path"                                                                                        │
     │             }                                                                                                                               │
     │         }                                                                                                                                   │
     │     } catch {                                                                                                                               │
     │         $result.success = $false                                                                                                            │
     │         $result.error = $_.Exception.Message                                                                                                │
     │     }                                                                                                                                       │
     │                                                                                                                                             │
     │     # Write result                                                                                                                          │
     │     $timestamp = Get-Date -Format 'yyyyMMdd_HHmmss'                                                                                         │
     │     $result | ConvertTo-Json -Depth 10 | Set-Content ".runs/watch/$timestamp.json"                                                          │
     │                                                                                                                                             │
     │     $status = if ($result.success) { "✓" } else { "✗" }                                                                                     │
     │     "$timestamp | $status | $Path" | Add-Content .runs/watch/watch.log                                                                      │
     │                                                                                                                                             │
     │     if (-not $result.success) {                                                                                                             │
     │         throw "Check failed for $Path"                                                                                                      │
     │     }                                                                                                                                       │
     │ }                                                                                                                                           │
     │                                                                                                                                             │
     │ task dev {                                                                                                                                  │
     │     Get-ChildItem -Recurse -Include *.py,*.ps1 |                                                                                            │
     │         Where-Object { $_.LastWriteTime -gt (Get-Date).AddHours(-1) } |                                                                     │
     │         ForEach-Object { Invoke-Build check.one -Path $_.FullName }                                                                         │
     │ }                                                                                                                                           │
     │                                                                                                                                             │
     │ task ci {                                                                                                                                   │
     │     Get-ChildItem -Recurse -Include *.py,*.ps1,*.psm1 |                                                                                     │
     │         ForEach-Object { Invoke-Build check.one -Path $_.FullName -Strict }                                                                 │
     │ }                                                                                                                                           │
     │                                                                                                                                             │
     │ ---                                                                                                                                         │
     │ Phase 4: Create Module Scaffolding Script (1-2 hours)                                                                                       │
     │                                                                                                                                             │
     │ 4.1 Create Module Generator                                                                                                                 │
     │                                                                                                                                             │
     │ New file: /tools/nameguard/create_module.py                                                                                                 │
     │                                                                                                                                             │
     │ #!/usr/bin/env python3                                                                                                                      │
     │ """                                                                                                                                         │
     │ Create Module - Scaffold new module with Two-ID naming                                                                                      │
     │                                                                                                                                             │
     │ Usage:                                                                                                                                      │
     │     python create_module.py --module domain_router --phase 1                                                                                │
     │ """                                                                                                                                         │
     │                                                                                                                                             │
     │ import yaml                                                                                                                                 │
     │ import argparse                                                                                                                             │
     │ from pathlib import Path                                                                                                                    │
     │ from typing import Dict                                                                                                                     │
     │                                                                                                                                             │
     │ def load_registry(registry_path: Path) -> Dict:                                                                                             │
     │     with open(registry_path) as f:                                                                                                          │
     │         return yaml.safe_load(f)                                                                                                            │
     │                                                                                                                                             │
     │ def create_module_structure(module_key: str, modules_path: Path, registry: Dict):                                                           │
     │     """Create complete module folder structure with Two-ID naming."""                                                                       │
     │                                                                                                                                             │
     │     module_info = registry['modules'][module_key]                                                                                           │
     │     tid = f"{module_info['mnemonic']}-{module_info['hash']}"                                                                                │
     │     phase = module_info['phase']                                                                                                            │
     │                                                                                                                                             │
     │     # Create folder name: {module_key}_{TID}                                                                                                │
     │     folder_name = f"{module_key}_{tid}"                                                                                                     │
     │     phase_dir = modules_path / f"phase_{phase}_*"  # Find matching phase dir                                                                │
     │                                                                                                                                             │
     │     # Find actual phase directory                                                                                                           │
     │     import glob                                                                                                                             │
     │     phase_dirs = list(modules_path.glob(f"phase_{phase}_*"))                                                                                │
     │     if not phase_dirs:                                                                                                                      │
     │         print(f"ERROR: Phase {phase} directory not found!")                                                                                 │
     │         return                                                                                                                              │
     │                                                                                                                                             │
     │     module_folder = phase_dirs[0] / folder_name                                                                                             │
     │     module_folder.mkdir(parents=True, exist_ok=True)                                                                                        │
     │                                                                                                                                             │
     │     # Create standard files                                                                                                                 │
     │     files_to_create = {                                                                                                                     │
     │         f'{tid}.run.py': f'''#!/usr/bin/env python3                                                                                         │
     │ """                                                                                                                                         │
     │ {module_key} ({tid}) - Main entrypoint                                                                                                      │
     │                                                                                                                                             │
     │ Module: {module_key}                                                                                                                        │
     │ Two-ID: {tid}                                                                                                                               │
     │ Phase: {phase}                                                                                                                              │
     │ Description: {module_info.get('description', 'TODO')}                                                                                       │
     │ """                                                                                                                                         │
     │                                                                                                                                             │
     │ import argparse                                                                                                                             │
     │ import json                                                                                                                                 │
     │ import logging                                                                                                                              │
     │ from pathlib import Path                                                                                                                    │
     │                                                                                                                                             │
     │ def main() -> int:                                                                                                                          │
     │     parser = argparse.ArgumentParser(description='{module_info.get("description", "TODO")}')                                                │
     │     parser.add_argument('--input', required=True, help='Input JSON file')                                                                   │
     │     parser.add_argument('--output', required=True, help='Output JSON file')                                                                 │
     │     parser.add_argument('--config', default='{tid}.config.yaml', help='Config file')                                                        │
     │                                                                                                                                             │
     │     args = parser.parse_args()                                                                                                              │
     │                                                                                                                                             │
     │     logging.basicConfig(level=logging.INFO)                                                                                                 │
     │     logger = logging.getLogger('{tid}')                                                                                                     │
     │                                                                                                                                             │
     │     # Load input                                                                                                                            │
     │     with open(args.input) as f:                                                                                                             │
     │         input_data = json.load(f)                                                                                                           │
     │                                                                                                                                             │
     │     logger.info(f"Processing input: {{args.input}}")                                                                                        │
     │                                                                                                                                             │
     │     # TODO: Implement module logic                                                                                                          │
     │     output_data = {{"status": "not_implemented", "module": "{module_key}", "tid": "{tid}"}}                                                 │
     │                                                                                                                                             │
     │     # Write output                                                                                                                          │
     │     with open(args.output, 'w') as f:                                                                                                       │
     │         json.dump(output_data, f, indent=2)                                                                                                 │
     │                                                                                                                                             │
     │     logger.info(f"Output written to: {{args.output}}")                                                                                      │
     │     return 0                                                                                                                                │
     │                                                                                                                                             │
     │ if __name__ == '__main__':                                                                                                                  │
     │     exit(main())                                                                                                                            │
     │ ''',                                                                                                                                        │
     │                                                                                                                                             │
     │         f'{tid}.config.yaml': f'''# Configuration for {module_key} ({tid})                                                                  │
     │                                                                                                                                             │
     │ module:                                                                                                                                     │
     │   name: {module_key}                                                                                                                        │
     │   tid: {tid}                                                                                                                                │
     │   phase: {phase}                                                                                                                            │
     │   version: "1.0.0"                                                                                                                          │
     │                                                                                                                                             │
     │ # TODO: Add module-specific configuration                                                                                                   │
     │ ''',                                                                                                                                        │
     │                                                                                                                                             │
     │         f'{tid}.schema.contract.json': f'''{{                                                                                               │
     │   "$schema": "http://json-schema.org/draft-07/schema#",                                                                                     │
     │   "title": "{module_key} Contract ({tid})",                                                                                                 │
     │   "description": "{module_info.get('description', 'TODO')}",                                                                                │
     │   "type": "object",                                                                                                                         │
     │   "properties": {{                                                                                                                          │
     │     "input": {{                                                                                                                             │
     │       "type": "object",                                                                                                                     │
     │       "description": "Input schema - TODO: Define"                                                                                          │
     │     }},                                                                                                                                     │
     │     "output": {{                                                                                                                            │
     │       "type": "object",                                                                                                                     │
     │       "description": "Output schema - TODO: Define"                                                                                         │
     │     }}                                                                                                                                      │
     │   }}                                                                                                                                        │
     │ }}                                                                                                                                          │
     │ ''',                                                                                                                                        │
     │                                                                                                                                             │
     │         f'{tid}.example.input.json': f'''{{                                                                                                 │
     │   "module": "{module_key}",                                                                                                                 │
     │   "tid": "{tid}",                                                                                                                           │
     │   "data": "TODO: Add example input"                                                                                                         │
     │ }}                                                                                                                                          │
     │ ''',                                                                                                                                        │
     │                                                                                                                                             │
     │         'api.py': f'''"""                                                                                                                   │
     │ Stable API surface for {module_key} ({tid})                                                                                                 │
     │ Auto-generated - DO NOT EDIT                                                                                                                │
     │ """                                                                                                                                         │
     │                                                                                                                                             │
     │ from .{tid}_run import main as run                                                                                                          │
     │ ''',                                                                                                                                        │
     │                                                                                                                                             │
     │         '__init__.py': f'''"""                                                                                                              │
     │ {module_key} module ({tid})                                                                                                                 │
     │ """                                                                                                                                         │
     │ ''',                                                                                                                                        │
     │                                                                                                                                             │
     │         'README.md': f'''# {module_key} ({tid})                                                                                             │
     │                                                                                                                                             │
     │ **Phase**: {phase}                                                                                                                          │
     │ **Description**: {module_info.get('description', 'TODO')}                                                                                   │
     │                                                                                                                                             │
     │ ## Files                                                                                                                                    │
     │                                                                                                                                             │
     │ - `{tid}.run.py` - Main entrypoint                                                                                                          │
     │ - `{tid}.config.yaml` - Configuration                                                                                                       │
     │ - `{tid}.schema.contract.json` - Input/output contract                                                                                      │
     │ - `{tid}.example.input.json` - Example input                                                                                                │
     │ - `api.py` - Stable import surface                                                                                                          │
     │                                                                                                                                             │
     │ ## Usage                                                                                                                                    │
     │                                                                                                                                             │
     │ ```bash                                                                                                                                     │
     │ python {tid}.run.py --input input.json --output output.json                                                                                 │
     │                                                                                                                                             │
     │ Integration                                                                                                                                 │
     │                                                                                                                                             │
     │ from modules.phase_{phase}_*.{folder_name}.api import run                                                                                   │
     │                                                                                                                                             │
     │ result = run(input_data)                                                                                                                    │
     │ '''                                                                                                                                         │
     │     }                                                                                                                                       │
     │                                                                                                                                             │
     │ for filename, content in files_to_create.items():                                                                                           │
     │     file_path = module_folder / filename                                                                                                    │
     │     file_path.write_text(content)                                                                                                           │
     │     print(f"✓ Created {file_path}")                                                                                                         │
     │                                                                                                                                             │
     │ print(f"\\n✓ Module '{module_key}' ({tid}) created at: {module_folder}")                                                                    │
     │ def main():                                                                                                                                 │
     │     parser = argparse.ArgumentParser(description='Create new module with Two-ID naming')                                                    │
     │     parser.add_argument('--module', required=True, help='Module key from registry')                                                         │
     │     parser.add_argument('--modules-path', default='./modules', help='Path to modules directory')                                            │
     │     parser.add_argument('--registry', default='./modules/registry.yaml', help='Path to registry.yaml')                                      │
     │                                                                                                                                             │
     │ args = parser.parse_args()                                                                                                                  │
     │                                                                                                                                             │
     │ registry_path = Path(args.registry)                                                                                                         │
     │ modules_path = Path(args.modules_path)                                                                                                      │
     │                                                                                                                                             │
     │ registry = load_registry(registry_path)                                                                                                     │
     │                                                                                                                                             │
     │ if args.module not in registry['modules']:                                                                                                  │
     │     print(f"ERROR: Module '{args.module}' not found in registry!")                                                                          │
     │     print(f"Available modules: {', '.join(registry['modules'].keys())}")                                                                    │
     │     return 1                                                                                                                                │
     │                                                                                                                                             │
     │ create_module_structure(args.module, modules_path, registry)                                                                                │
     │ return 0                                                                                                                                    │
     │ if name == 'main':                                                                                                                          │
     │     exit(main())                                                                                                                            │
     │                                                                                                                                             │
     │ ---                                                                                                                                         │
     │                                                                                                                                             │
     │ ## Summary: Complete File Structure                                                                                                         │
     │                                                                                                                                             │
     │ C:\Users\Richard Wilks\R_PIPELINE│                                                                                                          │
     │ ├── modules/                                    (NEW - Modular structure)                                                                   │
     │ │   ├── registry.yaml                           (NEW - Single source of truth)                                                              │
     │ │   ├── NAMING_CONVENTION.md                    (NEW - Documentation)                                                                       │
     │ │   │                                                                                                                                       │
     │ │   ├── phase_0_backplane/                                                                                                                  │
     │ │   │   ├── ledger_LD-3X7/                      (Folder with Two-ID)                                                                        │
     │ │   │   │   ├── LD-3X7.run.py                   (File with matching TID)                                                                    │
     │ │   │   │   ├── LD-3X7.config.yaml                                                                                                          │
     │ │   │   │   ├── LD-3X7.schema.ledger.json                                                                                                   │
     │ │   │   │   └── api.py                          (Stable import)                                                                             │
     │ │   │   ├── policy_pack_PP-9K2/                                                                                                             │
     │ │   │   ├── cache_ratelimit_CR-4Y8/                                                                                                         │
     │ │   │   ├── concurrency_controller_CC-2Z5/                                                                                                  │
     │ │   │   └── observability_OB-6W1/                                                                                                           │
     │ │   │                                                                                                                                       │
     │ │   ├── phase_1_intake_routing/                                                                                                             │
     │ │   │   ├── plan_ingestor_PI-5K9/                                                                                                           │
     │ │   │   ├── workstream_planner_WP-A2F/                                                                                                      │
     │ │   │   ├── domain_router_DR-2QJ/                                                                                                           │
     │ │   │   ├── goal_normalizer_GN-7M3/                                                                                                         │
     │ │   │   └── query_expander_QE-8P4/                                                                                                          │
     │ │   │                                                                                                                                       │
     │ │   ├── [phases 2-6 with similar structure]                                                                                                 │
     │ │   │                                                                                                                                       │
     │ │   └── init.py                                                                                                                             │
     │ │                                                                                                                                           │
     │ ├── watcher/                                    (NEW - Streamlined watcher)                                                                 │
     │ │   ├── build.ps1                               (SSOT orchestrator)                                                                         │
     │ │   ├── watch.ps1                               (File watcher)                                                                              │
     │ │   ├── watch.config.json                                                                                                                   │
     │ │   ├── watch.ignore                                                                                                                        │
     │ │   ├── pyproject.toml                                                                                                                      │
     │ │   ├── PSScriptAnalyzer.psd1                                                                                                               │
     │ │   └── README.md                                                                                                                           │
     │ │                                                                                                                                           │
     │ ├── tools/│   └── nameguard/                              (NEW - Naming enforcement)                                                        │
     │ │       ├── nameguard.py                        (Validator)                                                                                 │
     │ │       ├── nameguard.config.yaml                                                                                                           │
     │ │       └── create_module.py                    (Scaffolding tool)                                                                          │
     │ │                                                                                                                                           │
     │ ├── SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP-/ (EXISTING - Keep as-is)                                                                      │
     │ │   ├── .mcp/                                                                                                                               │
     │ │   ├── mcp-servers/                                                                                                                        │
     │ │   ├── policy/                                                                                                                             │
     │ │   ├── scripts/validation/                                                                                                                 │
     │ │   └── tools/                                                                                                                              │
     │ │                                                                                                                                           │
     │ ├── .runs/                                      (NEW - Output directory)                                                                    │
     │ │   ├── watch/                                                                                                                              │
     │ │   └── ci/                                                                                                                                 │
     │ │                                                                                                                                           │
     │ └── CLAUDE.md                                   (UPDATE with new structure)                                                                 │
     │                                                                                                                                             │
     │ ---                                                                                                                                         │
     │                                                                                                                                             │
     │ ## Identifier Mapping Reference                                                                                                             │
     │                                                                                                                                             │
     │ ### Example: domain_router Module                                                                                                           │
     │                                                                                                                                             │
     │ **Registry Entry**:                                                                                                                         │
     │ ```yaml                                                                                                                                     │
     │ domain_router:                                                                                                                              │
     │   mnemonic: DR                                                                                                                              │
     │   hash: 2QJ                                                                                                                                 │
     │   phase: 1                                                                                                                                  │
     │   color: "#2ca02c"                                                                                                                          │
     │                                                                                                                                             │
     │ Folder Name: domain_router_DR-2QJ                                                                                                           │
     │                                                                                                                                             │
     │ File Names:                                                                                                                                 │
     │ - DR-2QJ.run.py                                                                                                                             │
     │ - DR-2QJ.config.yaml                                                                                                                        │
     │ - DR-2QJ.schema.contract.json                                                                                                               │
     │ - DR-2QJ.example.input.json                                                                                                                 │
     │ - DR-2QJ.rules.yaml                                                                                                                         │
     │ - api.py (stable, no TID)                                                                                                                   │
     │                                                                                                                                             │
     │ Clear Understanding:                                                                                                                        │
     │ 1. Module key: domain_router (from registry)                                                                                                │
     │ 2. Two-ID: DR-2QJ (mnemonic DR + hash 2QJ)                                                                                                  │
     │ 3. Folder path: /modules/phase_1_intake_routing/domain_router_DR-2QJ/                                                                       │
     │ 4. All files inside prefixed with DR-2QJ                                                                                                    │
     │ 5. Import path: from modules.phase_1_intake_routing.domain_router_DR_2QJ.api import run                                                     │
     │                                                                                                                                             │
     │ ---                                                                                                                                         │
     │ Implementation Order                                                                                                                        │
     │                                                                                                                                             │
     │ 1. ✅ Create registry.yaml with all 24 modules                                                                                               │
     │ 2. ✅ Create NAMING_CONVENTION.md                                                                                                            │
     │ 3. ✅ Create phase directories (phase_0 through phase_6)                                                                                     │
     │ 4. ✅ Create nameguard.py tool                                                                                                               │
     │ 5. ✅ Create create_module.py scaffolding tool                                                                                               │
     │ 6. ✅ Generate first module (e.g., python create_module.py --module domain_router)                                                           │
     │ 7. ✅ Validate with nameguard (python nameguard.py --check)                                                                                  │
     │ 8. ✅ Integrate watcher to call modules                                                                                                      │
     │ 9. ✅ Update CLAUDE.md with new structure                                                                                                    │
     │ 10. ✅ Test end-to-end workflow                                                                                                              │
     │                                                                                                                                             │
     │ ---                                                                                                                                         │
     │ Success Criteria                                                                                                                            │
     │                                                                                                                                             │
     │ After implementation:                                                                                                                       │
     │                                                                                                                                             │
     │ - Registry has all 24 modules with Two-IDs                                                                                                  │
     │ - All module folders follow pattern: {module_key}_{TID}/                                                                                    │
     │ - All files inside folders follow pattern: {TID}.{role}.{ext}                                                                               │
     │ - Nameguard validates all naming                                                                                                            │
     │ - Watcher can call modules by TID                                                                                                           │
     │ - Create_module.py can scaffold new modules                                                                                                 │
     │ - Clear mapping: file → TID → module → folder                                                                                               │
     │ - No breaking changes to existing SPEC-1 infrastructure                                                                                     │
     ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

> use all plans created in this conversation and deliver 1 phase by phase plan that uses independent workstreams for each phaee if possible. 
create the master plan 

● I'll synthesize all plans from this conversation into ONE comprehensive master plan with parallel workstreams per phase.
                                                                                                                                    
●User approved Claude's plan:
  ⎿  MASTER PLAN: AI-Operated Pipeline with Streamlined Watcher + Two-ID Modular Structure
     
     Executive Summary
     
     Implement a complete AI-operated pipeline system that combines:
     1. Streamlined file-watcher (15 files, 3-4 hour setup)
     2. Modular 24-module structure with Two-ID naming
     3. Integration with existing SPEC-1 SafePatch infrastructure
     4. Proven-process discovery before custom coding
     5. Manifest-driven orchestration
     
     Total Timeline: 8 weeks with parallel workstreamsTeam Size: 2-3 developersIncremental Delivery: Working system after each phase
     
     ---
     PHASE 0: Foundation & Setup (Week 1)
     
     Goal: Establish base infrastructure and flatten directory structure
     
     Workstream 0A: Directory Restructuring (CRITICAL PATH)
     
     Owner: Dev 1Duration: 1 dayDependencies: None
     
     Tasks:
     1. ✅ Backup existing SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP- directory
     2. ✅ Flatten nested SPEC-1.../SPEC-1... structure to single level
     3. ✅ Verify all existing scripts still work
     4. ✅ Update CLAUDE.md with new paths
     
     Deliverables:
     - Single-level SPEC-1 directory
     - Updated path references
     - Backup archive
     
     Workstream 0B: Create Base Directories (PARALLEL)
     
     Owner: Dev 2Duration: 2 hoursDependencies: None
     
     Tasks:
     1. ✅ Create /modules/ with phase subdirectories
     modules/
     ├── phase_0_backplane/
     ├── phase_1_intake_routing/
     ├── phase_2_discovery_scoring/
     ├── phase_3_synthesis_patch/
     ├── phase_4_quality_gates/
     ├── phase_5_decision_export/
     └── phase_6_knowledge_ci/
     2. ✅ Create /watcher/ directory
     3. ✅ Create /tools/nameguard/ directory
     4. ✅ Create /.runs/watch/ and /.runs/ci/ directories
     5. ✅ Create /manifests/ directory
     6. ✅ Create /orchestrator/ directory
     
     Deliverables:
     - Complete directory skeleton
     - .gitkeep files in empty dirs
     
     Workstream 0C: Registry Creation (PARALLEL)
     
     Owner: Dev 3Duration: 3 hoursDependencies: None
     
     Tasks:
     1. ✅ Create /modules/registry.yaml with all 24 modules
     2. ✅ Generate Two-IDs (mnemonic + hash) for each module
     3. ✅ Assign phase numbers and colors
     4. ✅ Add descriptions from chat transcripts
     5. ✅ Create /modules/NAMING_CONVENTION.md
     
     Deliverables:
     - Complete registry.yaml (24 modules)
     - Naming convention documentation
     - Color scheme for visualization
     
     Phase 0 Exit Criteria:
     - Single-level SPEC-1 directory
     - All base directories created
     - Registry.yaml complete with 24 modules
     - All existing SPEC-1 scripts still functional
     
     ---
     PHASE 1: Streamlined Watcher (Week 1-2)
     
     Goal: Get fast file-watching pipeline operational
     
     Workstream 1A: Watcher Core (CRITICAL PATH)
     
     Owner: Dev 1Duration: 1 dayDependencies: Phase 0 complete
     
     Tasks:
     1. ✅ Create /watcher/build.ps1 (Invoke-Build SSOT)
       - Extension routing (Python/PowerShell)
       - Task dependency chains
       - Result aggregation
       - Integration with SPEC-1 validation
     2. ✅ Create /watcher/watch.ps1 (File watcher)
       - FileSystemWatcher implementation
       - Debounce logic (500ms)
       - Stability checks
       - Invoke-Build integration
     3. ✅ Test single file check workflow
     
     Deliverables:
     - Working build.ps1 (150 lines)
     - Working watch.ps1 (60 lines)
     - Test results for sample files
     
     Workstream 1B: Watcher Configuration (PARALLEL)
     
     Owner: Dev 2Duration: 2 hoursDependencies: None
     
     Tasks:
     1. ✅ Create /watcher/watch.config.json
       - Debounce timing
       - Include/exclude patterns
       - Tool configurations
     2. ✅ Create /watcher/watch.ignore
       - Ignore patterns for .runs/, .git/, etc.
     3. ✅ Create /watcher/pyproject.toml
       - ruff, pyright, pytest configs
     4. ✅ Create /watcher/PSScriptAnalyzer.psd1
       - PowerShell linter rules
     5. ✅ Create /watcher/.gitignore
     6. ✅ Create /watcher/README.md
       - Quick start guide
       - Usage examples
     
     Deliverables:
     - 6 configuration files
     - Documentation
     
     Workstream 1C: Test Files & Validation (PARALLEL)
     
     Owner: Dev 3Duration: 2 hoursDependencies: Workstream 1A 50% complete
     
     Tasks:
     1. ✅ Create test_sample.py with tests
     2. ✅ Create test_sample.ps1 with tests
     3. ✅ Create test_sample.Tests.ps1 (Pester)
     4. ✅ Run manual validation
     5. ✅ Verify .runs/watch/*.json output
     6. ✅ Verify watch.log entries
     
     Deliverables:
     - Test files for both languages
     - Validation report
     
     Phase 1 Exit Criteria:
     - Watcher detects file saves
     - Routes correctly by extension
     - Calls existing SPEC-1 validation
     - Results written to .runs/watch/
     - Latency < 2 seconds
     - Both Python and PowerShell work
     
     ---
     PHASE 2: Two-ID Naming System (Week 2-3)
     
     Goal: Implement naming enforcement and module scaffolding
     
     Workstream 2A: Nameguard Tool (CRITICAL PATH)
     
     Owner: Dev 1Duration: 1.5 daysDependencies: Registry.yaml from Phase 0
     
     Tasks:
     1. ✅ Create /tools/nameguard/nameguard.py
       - Validate folder names: {module_key}_{TID}/
       - Validate file names: {TID}.{role}.{ext}
       - Registry lookup and verification
       - Scan and report functionality
     2. ✅ Create /tools/nameguard/nameguard.config.yaml
       - Patterns and rules
       - Allowed special files
       - Role definitions
     3. ✅ Add command-line interface
       - --check mode
       - --fix mode (auto-rename)
       - --generate-api mode
     4. ✅ Test validation on sample structures
     
     Deliverables:
     - Working nameguard.py (300 lines)
     - Configuration file
     - Test report
     
     Workstream 2B: Module Scaffolding Tool (PARALLEL)
     
     Owner: Dev 2Duration: 1 dayDependencies: Registry.yaml
     
     Tasks:
     1. ✅ Create /tools/nameguard/create_module.py
       - Read registry.yaml
       - Generate folder with TID
       - Create standard files:
           - {TID}.run.py
         - {TID}.config.yaml
         - {TID}.schema.contract.json
         - {TID}.example.input.json
         - api.py
         - __init__.py
         - README.md
     2. ✅ Add CLI interface
     3. ✅ Test module generation
     
     Deliverables:
     - create_module.py script
     - Sample generated module
     
     Workstream 2C: Pre-commit Integration (PARALLEL)
     
     Owner: Dev 3Duration: 4 hoursDependencies: Workstream 2A complete
     
     Tasks:
     1. ✅ Create .pre-commit-config.yaml
       - Hook for nameguard --check
       - Hook for existing SPEC-1 validation
     2. ✅ Create /scripts/hooks/nameguard-hook.sh
     3. ✅ Test pre-commit hooks
     4. ✅ Document in CONTRIBUTING.md
     
     Deliverables:
     - Pre-commit configuration
     - Hook scripts
     - Documentation
     
     Phase 2 Exit Criteria:
     - Nameguard validates naming convention
     - Create_module.py generates valid modules
     - Pre-commit hooks block invalid naming
     - All folders follow {module}__{TID} pattern
     - All files follow {TID}.{role}.{ext} pattern
     
     ---
     PHASE 3: Core Modules - Backplane (Week 3-4)
     
     Goal: Implement Phase 0 foundational modules
     
     Workstream 3A: Ledger Module (LD-3X7)
     
     Owner: Dev 1Duration: 2 daysDependencies: Phase 2 complete
     
     Tasks:
     1. ✅ Generate module: python create_module.py --module ledger
     2. ✅ Implement LD-3X7.run.py
       - Append-only JSONL writer
       - Cryptographic signatures
       - Query interface
     3. ✅ Create LD-3X7.schema.ledger.json
     4. ✅ Create example entries
     5. ✅ Write tests
     
     Deliverables:
     - Working ledger module
     - 10+ test cases
     
     Workstream 3B: Policy Pack Module (PP-9K2)
     
     Owner: Dev 2Duration: 2 daysDependencies: Phase 2 complete
     
     Tasks:
     1. ✅ Generate module: python create_module.py --module policy_pack
     2. ✅ Implement PP-9K2.run.py
       - Load OPA policies
       - Validate against schemas
       - Policy enforcement
     3. ✅ Integrate with existing /policy/opa/
     4. ✅ Write tests
     
     Deliverables:
     - Working policy module
     - Integration with SPEC-1 policies
     
     Workstream 3C: Cache/Rate-Limit Module (CR-4Y8)
     
     Owner: Dev 3Duration: 2 daysDependencies: Phase 2 complete
     
     Tasks:
     1. ✅ Generate module: python create_module.py --module cache_ratelimit
     2. ✅ Implement CR-4Y8.run.py
       - Simple file-based cache
       - Rate limiting logic
       - TTL management
     3. ✅ Write tests
     
     Deliverables:
     - Working cache/rate-limit module
     
     Workstream 3D: Concurrency Controller (CC-2Z5)
     
     Owner: Dev 1Duration: 1 dayDependencies: Workstream 3A complete
     
     Tasks:
     1. ✅ Generate module
     2. ✅ Implement file locking
     3. ✅ Implement work-stream isolation
     4. ✅ Write tests
     
     Deliverables:
     - Working concurrency module
     
     Workstream 3E: Observability Module (OB-6W1)
     
     Owner: Dev 2Duration: 1 dayDependencies: Workstream 3B complete
     
     Tasks:
     1. ✅ Generate module
     2. ✅ Implement metrics collection
     3. ✅ Implement JSONL logging
     4. ✅ Write tests
     
     Deliverables:
     - Working observability module
     
     Phase 3 Exit Criteria:
     - All 5 backplane modules operational
     - Each module has tests (>80% coverage)
     - Integration tests pass
     - Ledger capturing all events
     - Policies enforcing rules
     
     ---
     PHASE 4: Core Modules - Intake & Discovery (Week 4-5)
     
     Goal: Implement intake routing and discovery modules
     
     Workstream 4A: Intake Modules (5 modules)
     
     Owner: Dev 1 + Dev 2Duration: 3 daysDependencies: Phase 3 complete
     
     Parallel Tasks:
     
     Dev 1:
     1. ✅ Plan Ingestor (PI-5K9)
       - Parse ChangePlan JSON
       - Validate against schema
       - Normalize format
     2. ✅ Domain Router (DR-2QJ)
       - Route by file extension
       - Apply routing rules
       - Map to toolchains
     3. ✅ Query Expander (QE-8P4)
       - Expand search queries
       - Synonym handling
     
     Dev 2:
     1. ✅ Workstream Planner (WP-A2F)
       - Partition dependency graph
       - Create isolated work-streams
       - Manage locks
     2. ✅ Goal Normalizer (GN-7M3)
       - Normalize capability vocabulary
       - Map to canonical terms
     
     Deliverables:
     - 5 working intake/routing modules
     - Tests for each
     
     Workstream 4B: Discovery Modules (3 modules)
     
     Owner: Dev 3Duration: 3 daysDependencies: Phase 3 complete
     
     Tasks:
     1. ✅ Discovery Adapters (DA-1R6)
       - GitHub adapter
       - PyPI adapter
       - Docs site adapter
       - Rate limiting integration
     2. ✅ Feature Extractors (FE-3S8)
       - Extract license info
       - Extract activity metrics
       - Extract examples/docs
     3. ✅ Scorer (SC-4T9)
       - Load scoring profiles
       - Calculate scores
       - Rank candidates
       - Apply policy gates
     
     Deliverables:
     - 3 discovery modules
     - Proven-process workflow operational
     
     Phase 4 Exit Criteria:
     - All 8 modules (intake + discovery) operational
     - End-to-end workflow: ChangePlan → Discovery → Scores
     - Integration with cache and ledger
     - Tests pass (>80% coverage)
     
     ---
     PHASE 5: Synthesis & Quality Gates (Week 5-6)
     
     Goal: Implement code synthesis and validation
     
     Workstream 5A: Synthesis Modules (2 modules)
     
     Owner: Dev 1Duration: 3 daysDependencies: Phase 4 complete
     
     Tasks:
     1. ✅ Synthesizer (SY-5U1)
       - Template selection
       - Renderer for Python (Invoke)
       - Renderer for PowerShell (Invoke-Build)
       - Renderer for GitHub Actions
       - Integration with proven playbooks
     2. ✅ Structured Patcher (SP-6V2)
       - AST-aware Python patches
       - PowerShell structured edits
       - YAML/TOML patching
       - JSON Patch (RFC 6902)
     
     Deliverables:
     - 2 synthesis modules
     - Template library
     - Patch examples
     
     Workstream 5B: Quality Gate Modules (3 modules)
     
     Owner: Dev 2 + Dev 3Duration: 3 daysDependencies: Phase 4 complete
     
     Parallel Tasks:
     
     Dev 2:
     1. ✅ Guardrails (GR-7W3)
       - Pre-validation checks
       - Schema validation
       - Policy enforcement
       - Integration with SPEC-1 guardrails
     2. ✅ Verifier (VR-8X4)
       - Call existing SPEC-1 SafePatch
       - Format → Lint → Type → Test chain
       - Result aggregation
     
     Dev 3:
     1. ✅ Error Auto-Repair (ER-9Y5)
       - Common error patterns
       - Auto-fix strategies
       - Retry logic
     
     Deliverables:
     - 3 quality gate modules
     - Integration with watcher
     - Full SafePatch validation
     
     Phase 5 Exit Criteria:
     - All 5 modules operational
     - End-to-end: Discovery → Synthesis → Patch → Validate
     - Integration with existing SPEC-1 validation
     - Watcher can trigger full pipeline
     
     ---
     PHASE 6: Decision & Export (Week 6-7)
     
     Goal: Implement selection and artifact export
     
     Workstream 6A: Decision Modules (3 modules)
     
     Owner: Dev 1Duration: 2 daysDependencies: Phase 5 complete
     
     Tasks:
     1. ✅ Selector (SL-1Z6)
       - Champion selection logic
       - Comparison algorithms
       - Rationale generation
     2. ✅ Exporter (EX-2A7)
       - Export to /out/champions/
       - Generate patch files
       - Create PRs via gh CLI
     3. ✅ Provenance & Rollback (PR-3B8)
       - Provenance tracking
       - Rollback capability
       - Audit trail
     
     Deliverables:
     - 3 decision modules
     - Export workflow operational
     
     Workstream 6B: Knowledge & CI Modules (3 modules)
     
     Owner: Dev 2 + Dev 3Duration: 2 daysDependencies: Phase 5 complete
     
     Parallel Tasks:
     
     Dev 2:
     1. ✅ Knowledge Reuse (KR-4C9)
       - Store proven solutions
       - Query by capability
       - Promote to playbooks
     
     Dev 3:
     1. ✅ Playbook Promoter (PB-5D1)
       - Validate playbook quality
       - Promote to /proven-playbooks/
     2. ✅ CI/Pre-commit Integrator (CI-6E2)
       - Generate .github/workflows/
       - Generate pre-commit hooks
       - Integration scripts
     
     Deliverables:
     - 3 knowledge/CI modules
     - Proven playbooks library
     - CI integration
     
     Phase 6 Exit Criteria:
     - All 6 modules operational
     - Full pipeline: Intake → Discover → Synth → Validate → Export
     - Playbooks being promoted
     - CI/pre-commit auto-generation
     
     ---
     PHASE 7: Orchestrator & Integration (Week 7-8)
     
     Goal: Manifest-driven orchestration and full integration
     
     Workstream 7A: Manifest System (CRITICAL PATH)
     
     Owner: Dev 1Duration: 3 daysDependencies: All modules from Phases 3-6
     
     Tasks:
     1. ✅ Create /manifests/pipeline.yml
       - Define all 24 modules
       - Dependency graph
       - Phase organization
       - Configuration references
     2. ✅ Create /manifests/pipeline.schema.json
       - JSON Schema for pipeline.yml
       - Validation rules
     3. ✅ Create /manifests/modules_config.yaml
       - Per-module configurations
       - Override defaults
     
     Deliverables:
     - Complete pipeline.yml
     - Schema validation
     - Configuration system
     
     Workstream 7B: Orchestrator (CRITICAL PATH)
     
     Owner: Dev 2Duration: 3 daysDependencies: Workstream 7A 50% complete
     
     Tasks:
     1. ✅ Create /orchestrator/run.py
       - Read pipeline.yml
       - Execute dependency graph
       - Handle errors gracefully
       - Integrate with ledger
     2. ✅ Create /orchestrator/io_bus.py
       - JSONL module chaining
       - Input/output validation
       - Schema enforcement
     3. ✅ Create /orchestrator/graph_executor.py
       - Dependency-aware execution
       - Parallel execution where possible
       - Progress tracking
     4. ✅ Create /orchestrator/config.yaml
       - Global settings
       - Timeouts and limits
     
     Deliverables:
     - Working orchestrator
     - Manifest-driven execution
     - Parallel workstream support
     
     Workstream 7C: Watcher Integration (PARALLEL)
     
     Owner: Dev 3Duration: 2 daysDependencies: Workstream 7B 50% complete
     
     Tasks:
     1. ✅ Update /watcher/build.ps1
       - Call orchestrator for complex workflows
       - Call modules directly for simple checks
       - Result aggregation
     2. ✅ Create integration tests
     3. ✅ Performance tuning
     4. ✅ Update documentation
     
     Deliverables:
     - Integrated watcher + orchestrator
     - Performance benchmarks
     
     Workstream 7D: GUI Control Surface (OPTIONAL)
     
     Owner: Dev 3Duration: 2 daysDependencies: Phase 6 complete
     
     Tasks:
     1. ✅ Create /gui/app.py
       - Simple web interface
       - Work-stream status
       - Diff viewer
       - PR links
     2. ✅ Create /gui/api.py
       - IPC to orchestrator
       - Query ledger
       - Control execution
     
     Deliverables:
     - Optional GUI for monitoring
     
     Phase 7 Exit Criteria:
     - Orchestrator executes manifest-driven pipelines
     - All 24 modules integrated
     - Watcher + orchestrator working together
     - End-to-end workflow operational
     - Performance acceptable (<5s for simple checks)
     
     ---
     PHASE 8: Documentation & Polish (Week 8)
     
     Goal: Complete documentation and prepare for production
     
     Workstream 8A: Documentation
     
     Owner: All devsDuration: 2 daysDependencies: Phase 7 complete
     
     Tasks:
     1. ✅ Update /CLAUDE.md (root)
       - Complete system overview
       - Quick start guide
       - Module reference
       - Troubleshooting
     2. ✅ Update /modules/README.md
       - Module catalog
       - Two-ID reference
       - Phase descriptions
     3. ✅ Create /docs/ARCHITECTURE.md
       - System architecture
       - Data flow diagrams
       - Integration points
     4. ✅ Create /docs/DEVELOPMENT.md
       - Development workflow
       - How to add modules
       - Testing guidelines
     5. ✅ Update existing SPEC-1 CLAUDE.md
       - Integration notes
       - Cross-references
     
     Deliverables:
     - Complete documentation suite
     
     Workstream 8B: Testing & Validation
     
     Owner: All devsDuration: 2 daysDependencies: Phase 7 complete
     
     Tasks:
     1. ✅ Integration tests for all modules
     2. ✅ End-to-end workflow tests
     3. ✅ Performance benchmarking
     4. ✅ Load testing
     5. ✅ Security review
     6. ✅ Validate all schemas
     7. ✅ Run nameguard on entire codebase
     
     Deliverables:
     - Test suite (>80% coverage)
     - Performance report
     - Security audit report
     
     Workstream 8C: CI/CD Setup
     
     Owner: Dev 1Duration: 1 dayDependencies: Workstream 8B complete
     
     Tasks:
     1. ✅ Create .github/workflows/watcher-ci.yml
     2. ✅ Create .github/workflows/modules-ci.yml
     3. ✅ Create .github/workflows/integration-ci.yml
     4. ✅ Set up branch protection
     5. ✅ Configure CODEOWNERS
     
     Deliverables:
     - Complete CI/CD pipeline
     - Branch protection rules
     
     Phase 8 Exit Criteria:
     - All documentation complete
     - All tests passing (>80% coverage)
     - CI/CD operational
     - System ready for production use
     
     ---
     FINAL DIRECTORY STRUCTURE
     
     C:\Users\Richard Wilks\R_PIPELINE\
     │
     ├── CLAUDE.md                                   (Master guide)
     ├── README.md                                   (Project overview)
     │
     ├── modules/                                    (24 modules with Two-IDs)
     │   ├── registry.yaml                           (Single source of truth)
     │   ├── NAMING_CONVENTION.md
     │   ├── README.md
     │   │
     │   ├── phase_0_backplane/
     │   │   ├── ledger_LD-3X7/
     │   │   │   ├── LD-3X7.run.py
     │   │   │   ├── LD-3X7.config.yaml
     │   │   │   ├── LD-3X7.schema.ledger.json
     │   │   │   ├── LD-3X7.example.input.json
     │   │   │   ├── api.py
     │   │   │   ├── __init__.py
     │   │   │   └── README.md
     │   │   ├── policy_pack_PP-9K2/
     │   │   ├── cache_ratelimit_CR-4Y8/
     │   │   ├── concurrency_controller_CC-2Z5/
     │   │   └── observability_OB-6W1/
     │   │
     │   ├── phase_1_intake_routing/
     │   │   ├── plan_ingestor_PI-5K9/
     │   │   ├── workstream_planner_WP-A2F/
     │   │   ├── domain_router_DR-2QJ/
     │   │   ├── goal_normalizer_GN-7M3/
     │   │   └── query_expander_QE-8P4/
     │   │
     │   ├── phase_2_discovery_scoring/
     │   │   ├── discovery_adapters_DA-1R6/
     │   │   ├── feature_extractors_FE-3S8/
     │   │   └── scorer_SC-4T9/
     │   │
     │   ├── phase_3_synthesis_patch/
     │   │   ├── synthesizer_SY-5U1/
     │   │   └── structured_patcher_SP-6V2/
     │   │
     │   ├── phase_4_quality_gates/
     │   │   ├── guardrails_GR-7W3/
     │   │   ├── verifier_VR-8X4/
     │   │   └── error_auto_repair_ER-9Y5/
     │   │
     │   ├── phase_5_decision_export/
     │   │   ├── selector_SL-1Z6/
     │   │   ├── exporter_EX-2A7/
     │   │   └── provenance_rollback_PR-3B8/
     │   │
     │   └── phase_6_knowledge_ci/
     │       ├── knowledge_reuse_KR-4C9/
     │       ├── playbook_promoter_PB-5D1/
     │       └── ci_precommit_integrator_CI-6E2/
     │
     ├── watcher/                                    (Streamlined watcher)
     │   ├── build.ps1                               (Invoke-Build SSOT)
     │   ├── watch.ps1                               (File watcher)
     │   ├── watch.config.json
     │   ├── watch.ignore
     │   ├── pyproject.toml
     │   ├── PSScriptAnalyzer.psd1
     │   ├── .gitignore
     │   └── README.md
     │
     ├── orchestrator/                               (Manifest-driven)
     │   ├── run.py                                  (Main orchestrator)
     │   ├── io_bus.py                               (JSONL chaining)
     │   ├── graph_executor.py                       (Dependency execution)
     │   ├── config.yaml
     │   └── errors.py
     │
     ├── manifests/                                  (Pipeline definitions)
     │   ├── pipeline.yml                            (Single source of truth)
     │   ├── pipeline.schema.json                    (Validation)
     │   └── modules_config.yaml                     (Per-module config)
     │
     ├── tools/                                      
     │   └── nameguard/                              (Naming enforcement)
     │       ├── nameguard.py                        (Validator)
     │       ├── nameguard.config.yaml
     │       ├── create_module.py                    (Scaffolding)
     │       └── README.md
     │
     ├── SPEC-1-AI-Upkeep-Suite-v2-Guardrails-MCP/   (Existing - integrated)
     │   ├── .mcp/                                   (MCP servers)
     │   ├── mcp-servers/
     │   ├── policy/                                 (OPA policies)
     │   ├── scripts/validation/                     (SafePatch)
     │   ├── tools/                                  (Quality tools)
     │   └── templates/
     │
     ├── .research/                                  (Proven-process discovery)
     │   ├── research.config.yaml
     │   ├── queries.yaml
     │   ├── evidence.jsonl
     │   ├── ranked_candidates.json
     │   ├── decision.md
     │   ├── summary.md
     │   ├── cache/
     │   └── schema/
     │
     ├── proven-playbooks/                           (Proven solutions)
     │   ├── file_watch_lint_test.yaml
     │   ├── invoke_tasks.yaml
     │   └── gha_ci_pipeline.yaml
     │
     ├── out/                                        (Artifacts)
     │   ├── champions/                              (Selected solutions)
     │   └── patches/                                (Generated patches)
     │
     ├── .runs/                                      (Execution logs)
     │   ├── watch/                                  (Watcher results)
     │   ├── ci/                                     (CI results)
     │   └── orchestrator/                           (Pipeline runs)
     │
     ├── ._machine/                                  (Global ledger)
     │   ├── ledger.jsonl                            (Append-only)
     │   ├── cache/
     │   └── runs/
     │
     ├── gui/                                        (Optional UI)
     │   ├── app.py
     │   ├── api.py
     │   └── views/
     │
     ├── docs/                                       (Documentation)
     │   ├── ARCHITECTURE.md
     │   ├── DEVELOPMENT.md
     │   ├── MODULE_REFERENCE.md
     │   └── TROUBLESHOOTING.md
     │
     └── .github/                                    (CI/CD)
         └── workflows/
             ├── watcher-ci.yml
             ├── modules-ci.yml
             ├── integration-ci.yml
             └── quality.yml
     
     ---
     WORKSTREAM DEPENDENCIES CHART
     
     PHASE 0 (Week 1):
     ├─ 0A: Dir Restructuring [CRITICAL]
     ├─ 0B: Base Directories [PARALLEL]
     └─ 0C: Registry Creation [PARALLEL]

     PHASE 1 (Week 1-2):
     ├─ 1A: Watcher Core [CRITICAL, depends on 0A]
     ├─ 1B: Watcher Config [PARALLEL]
     └─ 1C: Test & Validation [depends on 1A 50%]

     PHASE 2 (Week 2-3):
     ├─ 2A: Nameguard [CRITICAL, depends on 0C]
     ├─ 2B: Module Scaffolding [PARALLEL, depends on 0C]
     └─ 2C: Pre-commit [depends on 2A]

     PHASE 3 (Week 3-4):
     ├─ 3A: Ledger [depends on 2B]
     ├─ 3B: Policy [PARALLEL, depends on 2B]
     ├─ 3C: Cache/Rate [PARALLEL, depends on 2B]
     ├─ 3D: Concurrency [depends on 3A]
     └─ 3E: Observability [depends on 3B]

     PHASE 4 (Week 4-5):
     ├─ 4A: Intake Modules (5) [depends on 3]
     └─ 4B: Discovery Modules (3) [PARALLEL, depends on 3]

     PHASE 5 (Week 5-6):
     ├─ 5A: Synthesis (2) [depends on 4]
     └─ 5B: Quality Gates (3) [PARALLEL, depends on 4]

     PHASE 6 (Week 6-7):
     ├─ 6A: Decision (3) [depends on 5]
     └─ 6B: Knowledge/CI (3) [PARALLEL, depends on 5]

     PHASE 7 (Week 7-8):
     ├─ 7A: Manifest [CRITICAL, depends on 6]
     ├─ 7B: Orchestrator [CRITICAL, depends on 7A 50%]
     ├─ 7C: Integration [depends on 7B 50%]
     └─ 7D: GUI [OPTIONAL, PARALLEL]

     PHASE 8 (Week 8):
     ├─ 8A: Documentation [ALL]
     ├─ 8B: Testing [ALL]
     └─ 8C: CI/CD [depends on 8B]
     
     ---
     KEY METRICS & SUCCESS CRITERIA
     
     Performance Targets
     
     - Watcher latency: < 2 seconds (simple check)
     - Full pipeline: < 30 seconds (discovery → synthesis)
     - Module startup: < 500ms
     - Orchestrator overhead: < 1 second
     
     Quality Targets
     
     - Test coverage: > 80% for all modules
     - Nameguard validation: 100% pass
     - Schema validation: 100% pass
     - CI success rate: > 95%
     
     Scalability Targets
     
     - Support 100+ files in repository
     - Handle 10+ concurrent work-streams
     - Process 1000+ discovery candidates
     - Store 10k+ ledger entries
     
     ---
     RISK MITIGATION
     
     Critical Path Risks
     
     1. Directory restructuring breaks SPEC-1
       - Mitigation: Full backup before Phase 0
       - Rollback plan documented
     2. Watcher performance issues
       - Mitigation: Performance benchmarking in Phase 1
       - Optimization buffer in schedule
     3. Module integration complexity
       - Mitigation: Integration tests throughout
       - Incremental delivery per phase
     4. Orchestrator scalability
       - Mitigation: Parallel workstream design
       - Performance testing in Phase 7
     
     ---
     DELIVERABLES SUMMARY
     
     After Phase 1 (Week 2):
     
     ✅ Working file-watcher with SPEC-1 integration
     
     After Phase 3 (Week 4):
     
     ✅ 5 backplane modules operational
     ✅ Ledger capturing events
     ✅ Policies enforced
     
     After Phase 4 (Week 5):
     
     ✅ Proven-process discovery working
     ✅ 13 modules operational
     
     After Phase 6 (Week 7):
     
     ✅ All 24 modules operational
     ✅ End-to-end pipeline working
     
     After Phase 8 (Week 8):
     
     ✅ Production-ready system
     ✅ Complete documentation
     ✅ CI/CD operational
     
     ---
     TEAM ALLOCATION
     
     Dev 1 (Senior, PowerShell/Python):
     - Critical path workstreams
     - Orchestrator development
     - Complex integrations
     
     Dev 2 (Mid-level, Python):
     - Module development
     - Policy integration
     - Testing
     
     Dev 3 (Mid-level, Python/JS):
     - Discovery modules
     - GUI (optional)
     - Documentation
     
     Total Effort: ~480 person-hours (60 days × 8 hours)
  ⎿
  ⎿  Interrupted · What should Claude do instead?



