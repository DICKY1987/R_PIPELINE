I'll analyze the files in your project knowledge and classify them according to the module folders. Let me search through the project knowledge to identify all available files.Let me search for more files to get a comprehensive view of your project.Let me continue searching for more specific file patterns to ensure comprehensive coverage.Based on my analysis of your project knowledge, I'll now classify each file according to the module folders you've provided. Here's the comprehensive classification:

```json
[
  {
    "file_name": "Development Order - Parallel Streams Strategy.md",
    "matched_modules": [
      "Work_Stream_Planner_Builds_a_dependency_graph_partitions_independent_work_streams_and_applies_file_locks_for_safe_parallelism",
      "Observability_Exposes_minimal_metrics_logs_run_times_pass_rates_cache_hits_for_health_and_tuning"
    ],
    "reasoning": "This document outlines parallel development strategies with dependency management and stream coordination, which aligns with Work Stream Planner. It also includes timeline tracking and resource allocation metrics relevant to Observability."
  },
  {
    "file_name": "The Engineering Framework for Modern PowerShell Development.docx",
    "matched_modules": [
      "Policy_Pack_Centralizes_license_allowlists_maintenance_windows_OS_matrix_and_scoring_profiles",
      "Playbook_Promoter_Elevates_verified_solutions_into_reusable_internal_proven_playbooks_for_future_runs"
    ],
    "reasoning": "Comprehensive engineering framework document that establishes best practices, standards, and reusable patterns - core to Policy Pack. The emphasis on proven patterns and templates makes it relevant to Playbook Promoter."
  },
  {
    "file_name": "AIUOKEEP.md",
    "matched_modules": [
      "Guardrails_Enforces_structure_style_policy_and_schema_checks_to_keep_outputs_modular_and_compliant",
      "Ledger_Records_all_steps_as_append_only_JSONL_ULIDs_hashes_sources_pass_fail_for_provenance",
      "Policy_Pack_Centralizes_license_allowlists_maintenance_windows_OS_matrix_and_scoring_profiles"
    ],
    "reasoning": "Master file manifest describing guardrails, validation pipelines, schemas, and policy enforcement. It documents the complete suite structure including ledger, schemas, and compliance mechanisms."
  },
  {
    "file_name": "spec_1_ai_upkeep_suite_v_2_guardrails_mcp.md",
    "matched_modules": [
      "Guardrails_Enforces_structure_style_policy_and_schema_checks_to_keep_outputs_modular_and_compliant",
      "Plan_Ingestor_Parses_proposed_change_plan_json_and_normalizes_ops_edit_create_remove_with_domains_and_deliverables",
      "Verifier_Runs_static_checks_smoke_tests_and_time_boxed_runtime_probes_in_disposable_envs_containers"
    ],
    "reasoning": "Specification document for guardrails, MCP integration, and SafePatch validation pipeline. Covers ChangePlan schema validation, OPA policies, and verification workflows."
  },
  {
    "file_name": "GUARDRAILS.md",
    "matched_modules": [
      "Guardrails_Enforces_structure_style_policy_and_schema_checks_to_keep_outputs_modular_and_compliant"
    ],
    "reasoning": "Dedicated documentation for the guardrail framework including input/prompt guardrails, structural guardrails, policy guardrails, execution guardrails, and audit guardrails."
  },
  {
    "file_name": "ARCHITECTURE.md",
    "matched_modules": [
      "Work_Stream_Planner_Builds_a_dependency_graph_partitions_independent_work_streams_and_applies_file_locks_for_safe_parallelism",
      "Domain_Router_Routes_each_op_to_the_correct_lane_python_script_powershell_script_workflow_config_docs"
    ],
    "reasoning": "System architecture documentation describing component relationships, data flow, and module interactions - essential for Work Stream Planning and Domain Routing."
  },
  {
    "file_name": "VALIDATION_PIPELINE.md",
    "matched_modules": [
      "Verifier_Runs_static_checks_smoke_tests_and_time_boxed_runtime_probes_in_disposable_envs_containers",
      "Structured_Patcher_Applies_safe_edits_using_AST_TOML_YAML_merges_instead_of_brittle_text_diffs"
    ],
    "reasoning": "Documents the SafePatch validation pipeline stages including formatting, linting, type checking, testing, SAST, and policy enforcement."
  },
  {
    "file_name": "MCP_INTEGRATION.md",
    "matched_modules": [
      "CI_Pre_Commit_Integrator_Wires_gating_rules_into_hooks_and_pipelines_to_block_merges_without_fresh_verified_outputs",
      "Caching_Rate_Limiter_Mirrors_raw_API_payloads_dedupes_queries_and_respects_rate_limits_backoff"
    ],
    "reasoning": "Guide for MCP configuration, server setup, and workflow integration - directly relevant to CI/Pre-Commit integration and potentially rate limiting for MCP API calls."
  },
  {
    "file_name": "Module Template Pack (PowerShell)_CODE_MODULAZTION.md",
    "matched_modules": [
      "Synthesizer_Generates_new_files_or_edits_via_capability_template_mappings_to_satisfy_deliverables",
      "Playbook_Promoter_Elevates_verified_solutions_into_reusable_internal_proven_playbooks_for_future_runs"
    ],
    "reasoning": "Template pack for generating PowerShell modules with standardized structures across five categories (Acquisition, Transformation, State Change, Validation, Orchestration) - core to Synthesizer and Playbook promotion."
  },
  {
    "file_name": "AdvancedFunction.ps1",
    "matched_modules": [
      "Synthesizer_Generates_new_files_or_edits_via_capability_template_mappings_to_satisfy_deliverables"
    ],
    "reasoning": "Template file for production-ready PowerShell advanced functions - used by Synthesizer for code generation."
  },
  {
    "file_name": "Module.psm1",
    "matched_modules": [
      "Synthesizer_Generates_new_files_or_edits_via_capability_template_mappings_to_satisfy_deliverables"
    ],
    "reasoning": "PowerShell module template aligned with AIUOKEEP guardrails - used by Synthesizer for module scaffolding."
  },
  {
    "file_name": "Module.psd1",
    "matched_modules": [
      "Synthesizer_Generates_new_files_or_edits_via_capability_template_mappings_to_satisfy_deliverables"
    ],
    "reasoning": "PowerShell module manifest template - part of the Synthesizer's template library."
  },
  {
    "file_name": "Get-McpConfiguration.ps1",
    "matched_modules": [
      "Feature_Extractors_Normalizes_signals_license_releases_examples_tests_CI_OS_fit_into_structured_features_jsonl"
    ],
    "reasoning": "Retrieves current MCP configuration state - extracts and normalizes configuration features."
  },
  {
    "file_name": "Get-DesiredStateConfiguration.ps1",
    "matched_modules": [
      "Feature_Extractors_Normalizes_signals_license_releases_examples_tests_CI_OS_fit_into_structured_features_jsonl"
    ],
    "reasoning": "Reads and validates desired MCP configuration from JSON - extracts configuration features and validates structure."
  },
  {
    "file_name": "New-McpConfigurationObject.ps1",
    "matched_modules": [
      "Structured_Patcher_Applies_safe_edits_using_AST_TOML_YAML_merges_instead_of_brittle_text_diffs"
    ],
    "reasoning": "Merges desired and current configurations - performs structured configuration merging."
  },
  {
    "file_name": "Set-McpConfiguration.ps1",
    "matched_modules": [
      "Exporter_Emits_the_single_champion_artifact_file_patch_and_minimal_PR_metadata_for_human_review"
    ],
    "reasoning": "Writes merged configuration to mcp.json - exports final configuration artifacts."
  },
  {
    "file_name": "Test-McpEnvironment.ps1",
    "matched_modules": [
      "Verifier_Runs_static_checks_smoke_tests_and_time_boxed_runtime_probes_in_disposable_envs_containers"
    ],
    "reasoning": "Validates MCP servers are healthy and accessible - performs environment verification checks."
  },
  {
    "file_name": "Initialize-McpEnvironment.ps1",
    "matched_modules": [
      "Work_Stream_Planner_Builds_a_dependency_graph_partitions_independent_work_streams_and_applies_file_locks_for_safe_parallelism",
      "Exporter_Emits_the_single_champion_artifact_file_patch_and_minimal_PR_metadata_for_human_review"
    ],
    "reasoning": "Orchestrator script that coordinates MCP environment setup workflow - plans execution and exports final state."
  },
  {
    "file_name": "mcp_servers.json",
    "matched_modules": [
      "Policy_Pack_Centralizes_license_allowlists_maintenance_windows_OS_matrix_and_scoring_profiles",
      "Discovery_Adapters_Collects_candidate_solutions_from_code_hosts_registries_and_docs_into_append_only_evidence_jsonl"
    ],
    "reasoning": "Authoritative configuration for MCP servers and tools - defines policy boundaries and discovery sources."
  },
  {
    "file_name": "access_groups.json",
    "matched_modules": [
      "Policy_Pack_Centralizes_license_allowlists_maintenance_windows_OS_matrix_and_scoring_profiles"
    ],
    "reasoning": "Defines access control groups and tool permissions - central policy configuration."
  },
  {
    "file_name": "semgrep.yml",
    "matched_modules": [
      "Guardrails_Enforces_structure_style_policy_and_schema_checks_to_keep_outputs_modular_and_compliant"
    ],
    "reasoning": "Base Semgrep rules for repository-wide security and quality - enforces code compliance."
  },
  {
    "file_name": "semgrep-powershell.yml",
    "matched_modules": [
      "Guardrails_Enforces_structure_style_policy_and_schema_checks_to_keep_outputs_modular_and_compliant"
    ],
    "reasoning": "PowerShell-specific Semgrep rules - language-specific guardrail enforcement."
  },
  {
    "file_name": "semgrep-python.yml",
    "matched_modules": [
      "Guardrails_Enforces_structure_style_policy_and_schema_checks_to_keep_outputs_modular_and_compliant"
    ],
    "reasoning": "Python-specific Semgrep rules - language-specific guardrail enforcement."
  },
  {
    "file_name": "semgrep-secrets.yml",
    "matched_modules": [
      "Guardrails_Enforces_structure_style_policy_and_schema_checks_to_keep_outputs_modular_and_compliant"
    ],
    "reasoning": "Secret detection patterns - security-focused guardrails."
  },
  {
    "file_name": "Proven-Process Discovery & Synthesis Pipeline.md",
    "matched_modules": [
      "Discovery_Adapters_Collects_candidate_solutions_from_code_hosts_registries_and_docs_into_append_only_evidence_jsonl",
      "Goal_Normalizer_Converts_high_level_goals_into_capability_tags_and_constraints_for_deterministic_search",
      "Query_Expander_Produces_stable_queries_yaml_by_combining_capability_synonyms_with_ecosystem_platform_anchors",
      "Feature_Extractors_Normalizes_signals_license_releases_examples_tests_CI_OS_fit_into_structured_features_jsonl",
      "Scorer_Computes_the_Provenness_Score_using_tunable_weights_and_policy_gates_license_maintenance_windows",
      "Synthesizer_Generates_new_files_or_edits_via_capability_template_mappings_to_satisfy_deliverables",
      "Selector_Chooses_the_highest_scoring_candidate_that_passes_verification_falls_back_or_spikes_if_needed"
    ],
    "reasoning": "Comprehensive document describing the machine-first proven-process discovery pipeline covering goal normalization, query expansion, discovery, feature extraction, scoring, synthesis, and selection."
  },
  {
    "file_name": "Blueprint_Hybrid Git Safety & Synchronization System.md",
    "matched_modules": [
      "Provenance_Rollback_Manager_Embeds_template_source_ULIDs_in_files_and_supports_automatic_revert_on_regressions",
      "Work_Stream_Planner_Builds_a_dependency_graph_partitions_independent_work_streams_and_applies_file_locks_for_safe_parallelism",
      "Ledger_Records_all_steps_as_append_only_JSONL_ULIDs_hashes_sources_pass_fail_for_provenance"
    ],
    "reasoning": "Git safety system with automatic backup, stash management, and recovery mechanisms - supports provenance tracking, rollback, and concurrent work stream safety."
  },
  {
    "file_name": "deterministic_git_guide.md",
    "matched_modules": [
      "Provenance_Rollback_Manager_Embeds_template_source_ULIDs_in_files_and_supports_automatic_revert_on_regressions",
      "CI_Pre_Commit_Integrator_Wires_gating_rules_into_hooks_and_pipelines_to_block_merges_without_fresh_verified_outputs"
    ],
    "reasoning": "Guide for deterministic Git workflows including merge trains and CI/CD integration - supports rollback and pre-commit integration."
  },
  {
    "file_name": "Modularization Phase Plan -Parallel Workstreams.md",
    "matched_modules": [
      "Work_Stream_Planner_Builds_a_dependency_graph_partitions_independent_work_streams_and_applies_file_locks_for_safe_parallelism"
    ],
    "reasoning": "Detailed modularization plan with parallel workstreams and dependency management - directly describes Work Stream Planner functionality."
  },
  {
    "file_name": "Naming_Convention_Guide.md",
    "matched_modules": [
      "Policy_Pack_Centralizes_license_allowlists_maintenance_windows_OS_matrix_and_scoring_profiles"
    ],
    "reasoning": "Establishes naming conventions and standards - part of centralized policy."
  },
  {
    "file_name": "conventions.md",
    "matched_modules": [
      "Policy_Pack_Centralizes_license_allowlists_maintenance_windows_OS_matrix_and_scoring_profiles"
    ],
    "reasoning": "Code standards and conventions document - central policy configuration."
  },
  {
    "file_name": "file_router_config.json",
    "matched_modules": [
      "Domain_Router_Routes_each_op_to_the_correct_lane_python_script_powershell_script_workflow_config_docs"
    ],
    "reasoning": "Configuration for file routing system - defines routing rules for different file types and domains."
  },
  {
    "file_name": "FileRouter_Watcher.ps1",
    "matched_modules": [
      "Domain_Router_Routes_each_op_to_the_correct_lane_python_script_powershell_script_workflow_config_docs"
    ],
    "reasoning": "Automated file routing implementation - executes domain routing logic."
  },
  {
    "file_name": "apply_patch.ps1",
    "matched_modules": [
      "Structured_Patcher_Applies_safe_edits_using_AST_TOML_YAML_merges_instead_of_brittle_text_diffs"
    ],
    "reasoning": "Applies patches using safe edit mechanisms - core Structured Patcher functionality."
  },
  {
    "file_name": "apply_jsonpatch.ps1",
    "matched_modules": [
      "Structured_Patcher_Applies_safe_edits_using_AST_TOML_YAML_merges_instead_of_brittle_text_diffs"
    ],
    "reasoning": "JSON patch application - structured patching for JSON documents."
  },
  {
    "file_name": "run_comby.ps1",
    "matched_modules": [
      "Structured_Patcher_Applies_safe_edits_using_AST_TOML_YAML_merges_instead_of_brittle_text_diffs"
    ],
    "reasoning": "Comby-based code transformation - structured code patching."
  },
  {
    "file_name": "run_ast_mod.ps1",
    "matched_modules": [
      "Structured_Patcher_Applies_safe_edits_using_AST_TOML_YAML_merges_instead_of_brittle_text_diffs"
    ],
    "reasoning": "AST-based code modification - structured patching using abstract syntax trees."
  },
  {
    "file_name": "regenerate.ps1",
    "matched_modules": [
      "Error_Auto_Repair_Applies_deterministic_fixes_formatters_organizers_before_escalating_failures"
    ],
    "reasoning": "Regeneration script for auto-repair - applies deterministic fixes."
  },
  {
    "file_name": "Pester_Tests.ps1",
    "matched_modules": [
      "Verifier_Runs_static_checks_smoke_tests_and_time_boxed_runtime_probes_in_disposable_envs_containers"
    ],
    "reasoning": "Pester test template - used by Verifier for runtime probes."
  },
  {
    "file_name": "test_changeplan_validator.py",
    "matched_modules": [
      "Plan_Ingestor_Parses_proposed_change_plan_json_and_normalizes_ops_edit_create_remove_with_domains_and_deliverables"
    ],
    "reasoning": "Tests for ChangePlan validation - ensures Plan Ingestor works correctly."
  },
  {
    "file_name": "Invoke-IntegrationTests.ps1",
    "matched_modules": [
      "Verifier_Runs_static_checks_smoke_tests_and_time_boxed_runtime_probes_in_disposable_envs_containers"
    ],
    "reasoning": "Integration test orchestrator - part of verification workflow."
  },
  {
    "file_name": "MASTER_RESEARCH_PROMPT_Proven-Process_Harvest.md",
    "matched_modules": [
      "Discovery_Adapters_Collects_candidate_solutions_from_code_hosts_registries_and_docs_into_append_only_evidence_jsonl",
      "Knowledge_Reuse_Manager_Reuses_selected_champions_across_work_streams_to_avoid_duplicate_synthesis"
    ],
    "reasoning": "Research prompt for harvesting proven processes from established ecosystems - guides Discovery Adapters and Knowledge Reuse."
  },
  {
    "file_name": "MULTI_DOC_fILES.md",
    "matched_modules": [
      "Playbook_Promoter_Elevates_verified_solutions_into_reusable_internal_proven_playbooks_for_future_runs"
    ],
    "reasoning": "Multi-document file guidelines and checklists - supports playbook documentation and promotion."
  },
  {
    "file_name": "front_load refactoring .md",
    "matched_modules": [
      "Playbook_Promoter_Elevates_verified_solutions_into_reusable_internal_proven_playbooks_for_future_runs"
    ],
    "reasoning": "Refactoring guidance and best practices - contributes to playbook library."
  },
  {
    "file_name": "Quick_Reference_Development_Order.md",
    "matched_modules": [
      "Work_Stream_Planner_Builds_a_dependency_graph_partitions_independent_work_streams_and_applies_file_locks_for_safe_parallelism"
    ],
    "reasoning": "Quick reference for development sequencing - supports work stream planning."
  },
  {
    "file_name": "pipeline_file_manifest_development_order_supplement.md",
    "matched_modules": [
      "Work_Stream_Planner_Builds_a_dependency_graph_partitions_independent_work_streams_and_applies_file_locks_for_safe_parallelism"
    ],
    "reasoning": "Supplement to development order with pipeline manifest details - extends work stream planning guidance."
  },
  {
    "file_name": "MODULAR_STRUCTURE_TREE.md",
    "matched_modules": [
      "Domain_Router_Routes_each_op_to_the_correct_lane_python_script_powershell_script_workflow_config_docs"
    ],
    "reasoning": "Documents modular structure organization - supports domain routing decisions."
  },
  {
    "file_name": "00_EXECUTIVE_SUMMARY.md",
    "matched_modules": [
      "Observability_Exposes_minimal_metrics_logs_run_times_pass_rates_cache_hits_for_health_and_tuning"
    ],
    "reasoning": "Executive summary providing high-level overview and metrics - observability reporting."
  },
  {
    "file_name": "comparison_and_migration.md",
    "matched_modules": [
      "Knowledge_Reuse_Manager_Reuses_selected_champions_across_work_streams_to_avoid_duplicate_synthesis"
    ],
    "reasoning": "Comparison and migration strategies - supports knowledge reuse by identifying similar patterns."
  },
  {
    "file_name": "streamlined_workflow_blueprint.md",
    "matched_modules": [
      "Work_Stream_Planner_Builds_a_dependency_graph_partitions_independent_work_streams_and_applies_file_locks_for_safe_parallelism",
      "Concurrency_Controller_Caps_parallel_jobs_manages_work_queue_fairness_and_prevents_resource_thrash"
    ],
    "reasoning": "Streamlined workflow design - covers work stream planning and concurrency control."
  },
  {
    "file_name": "file_watcher_error_check_pipeline_blueprint_invoke_build_invoke.md",
    "matched_modules": [
      "Spike_Harness_Time_boxed_sandbox_trials_to_quickly_validate_borderline_candidates_or_tie_breakers",
      "Verifier_Runs_static_checks_smoke_tests_and_time_boxed_runtime_probes_in_disposable_envs_containers"
    ],
    "reasoning": "File watcher pipeline blueprint with error checking - describes spike harness and verification strategies."
  },
  {
    "file_name": "R_Streamlined_File-Watcher_Pipeline__Invoke-Based_.md",
    "matched_modules": [
      "Spike_Harness_Time_boxed_sandbox_trials_to_quickly_validate_borderline_candidates_or_tie_breakers",
      "Verifier_Runs_static_checks_smoke_tests_and_time_boxed_runtime_probes_in_disposable_envs_containers"
    ],
    "reasoning": "Refined streamlined file-watcher pipeline - spike harness and verification implementation."
  },
  {
    "file_name": "quick_start_guide.md",
    "matched_modules": [
      "Playbook_Promoter_Elevates_verified_solutions_into_reusable_internal_proven_playbooks_for_future_runs"
    ],
    "reasoning": "Quick start guide - reusable playbook for getting started."
  },
  {
    "file_name": "CLAUDE.md",
    "matched_modules": [
      "Observability_Exposes_minimal_metrics_logs_run_times_pass_rates_cache_hits_for_health_and_tuning"
    ],
    "reasoning": "Documentation specific to Claude integration - may contain observability or usage metrics."
  },
  {
    "file_name": "TROUBLESHOOTING.md",
    "matched_modules": [
      "Error_Auto_Repair_Applies_deterministic_fixes_formatters_organizers_before_escalating_failures",
      "Observability_Exposes_minimal_metrics_logs_run_times_pass_rates_cache_hits_for_health_and_tuning"
    ],
    "reasoning": "Troubleshooting guide - supports error auto-repair and observability for issue diagnosis."
  },
  {
    "file_name": "AGENT_GUIDELINES.md",
    "matched_modules": [
      "Guardrails_Enforces_structure_style_policy_and_schema_checks_to_keep_outputs_modular_and_compliant"
    ],
    "reasoning": "Guidelines for AI agents - defines guardrails for agent behavior and output."
  },
  {
    "file_name": "Connect_Claude_Code_to_tools_via_MCP.md",
    "matched_modules": [
      "CI_Pre_Commit_Integrator_Wires_gating_rules_into_hooks_and_pipelines_to_block_merges_without_fresh_verified_outputs"
    ],
    "reasoning": "Guide for connecting Claude Code to MCP tools - CI/integration documentation."
  },
  {
    "file_name": "mcp_server_power_shell_doc.md",
    "matched_modules": [
      "Discovery_Adapters_Collects_candidate_solutions_from_code_hosts_registries_and_docs_into_append_only_evidence_jsonl"
    ],
    "reasoning": "MCP PowerShell server documentation - describes discovery and adapter capabilities."
  },
  {
    "file_name": "madchat1.md through madchat13.md",
    "matched_modules": [
      "Goal_Normalizer_Converts_high_level_goals_into_capability_tags_and_constraints_for_deterministic_search",
      "Query_Expander_Produces_stable_queries_yaml_by_combining_capability_synonyms_with_ecosystem_platform_anchors",
      "Discovery_Adapters_Collects_candidate_solutions_from_code_hosts_registries_and_docs_into_append_only_evidence_jsonl",
      "Feature_Extractors_Normalizes_signals_license_releases_examples_tests_CI_OS_fit_into_structured_features_jsonl",
      "Scorer_Computes_the_Provenness_Score_using_tunable_weights_and_policy_gates_license_maintenance_windows",
      "Work_Stream_Planner_Builds_a_dependency_graph_partitions_independent_work_streams_and_applies_file_locks_for_safe_parallelism"
    ],
    "reasoning": "Series of chat transcripts covering pipeline architecture, module design, proven-process discovery, scoring, goal normalization, and work stream planning. These files document the evolution and design decisions for multiple modules."
  },
  {
    "file_name": "powershell-verify.yml",
    "matched_modules": [
      "CI_Pre_Commit_Integrator_Wires_gating_rules_into_hooks_and_pipelines_to_block_merges_without_fresh_verified_outputs"
    ],
    "reasoning": "GitHub Actions workflow for PowerShell verification - CI/CD pipeline integration."
  },
  {
    "file_name": "python-verify.yml",
    "matched_modules": [
      "CI_Pre_Commit_Integrator_Wires_gating_rules_into_hooks_and_pipelines_to_block_merges_without_fresh_verified_outputs"
    ],
    "reasoning": "GitHub Actions workflow for Python verification - CI/CD pipeline integration."
  },
  {
    "file_name": "typescript-verify.yml",
    "matched_modules": [
      "CI_Pre_Commit_Integrator_Wires_gating_rules_into_hooks_and_pipelines_to_block_merges_without_fresh_verified_outputs"
    ],
    "reasoning": "GitHub Actions workflow for TypeScript verification - CI/CD pipeline integration."
  },
  {
    "file_name": "sast-secrets.yml",
    "matched_modules": [
      "CI_Pre_Commit_Integrator_Wires_gating_rules_into_hooks_and_pipelines_to_block_merges_without_fresh_verified_outputs"
    ],
    "reasoning": "GitHub Actions workflow for SAST and secret scanning - CI/CD security integration."
  },
  {
    "file_name": "policy-check.yml",
    "matched_modules": [
      "CI_Pre_Commit_Integrator_Wires_gating_rules_into_hooks_and_pipelines_to_block_merges_without_fresh_verified_outputs"
    ],
    "reasoning": "GitHub Actions workflow for policy validation - CI/CD compliance integration."
  },
  {
    "file_name": "quality.yml",
    "matched_modules": [
      "CI_Pre_Commit_Integrator_Wires_gating_rules_into_hooks_and_pipelines_to_block_merges_without_fresh_verified_outputs"
    ],
    "reasoning": "Main GitHub Actions quality gate workflow - orchestrates CI/CD validations."
  },
  {
    "file_name": "drift-detection.yml",
    "matched_modules": [
      "Observability_Exposes_minimal_metrics_logs_run_times_pass_rates_cache_hits_for_health_and_tuning"
    ],
    "reasoning": "GitHub Actions workflow for drift detection - observability and monitoring."
  }
]
```

This classification organizes all discovered files from your project knowledge into the appropriate module folders based on their functionality and purpose within your AI-operated pipeline architecture.